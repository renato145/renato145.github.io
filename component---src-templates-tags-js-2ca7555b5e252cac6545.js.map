{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./src/components/PostPreview.tsx","webpack:///./src/components/Posts.tsx"],"names":["TagsTemplate","pageContext","data","location","tag","posts","allMdx","edges","title","headerConfig","className","pageQuery","PostPreview","node","props","postTitle","frontmatter","fields","slug","tags","to","date","TagList","dangerouslySetInnerHTML","__html","description","excerpt","Posts","showLimit","showLoadMore","loadMoreText","autoLoadMore","useState","limit","setLimit","visiblePosts","slice","length","increaseLimit","useCallback","useOnNoScrollLoad","useOnScrollEnd","map","key","LinkButton","onClick"],"mappings":"4FAAA,8GAwBeA,UAlBM,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACjCC,EAAQH,EAARG,IACFC,EAAK,UAAGH,EAAKI,cAAR,aAAG,EAAaC,MAE3B,OACE,kBAAC,IAAD,CACEJ,SAAUA,EACVK,MAAOJ,EAEPK,aAAc,CAAED,MAAOJ,IAEvB,kBAAC,IAAD,CAAOC,MAAOA,EAAOG,OAAK,IAC1B,wBAAIE,UAAU,SACd,kBAAC,IAAD,CAAaN,IAAKA,EAAKI,OAAK,MAO3B,IAAMG,EAAS,c,iICjBTC,EAA+B,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAASC,EAAY,wBAC5DC,EAAYF,EAAKG,YAAYR,OAASK,EAAKI,OAAOC,KAClDC,EAAON,EAAKG,YAAYG,KAE9B,OACE,wBAASL,EACP,6BACE,kBAAC,OAAD,CAAMM,GAAIP,EAAKI,OAAOC,KAAMR,UAAU,uBACnCK,IAGL,yBAAKL,UAAU,8BACb,2BAAIG,EAAKG,YAAYK,MACrB,uBAAGX,UAAU,QAAb,KACA,kBAACY,EAAA,EAAD,CAASH,KAAMA,KAEjB,uBACET,UAAU,OACVa,wBAAyB,CACvBC,OAAQX,EAAKG,YAAYS,aAAeZ,EAAKa,a,oCCZ1CC,EAAyB,SAAC,GAQjC,QAPJnB,aAOI,aANJoB,iBAMI,MANQ,EAMR,MALJC,oBAKI,aAJJC,oBAII,MAJW,YAIX,MAHJC,oBAGI,SAFJ1B,EAEI,EAFJA,MACGS,EACC,4FACsBkB,mBAASJ,GAA5BK,EADH,KACUC,EADV,KAEEC,EAAe9B,EAAM+B,MAAM,EAAGH,GAAS5B,EAAMgC,QAC7CC,EAAgBC,uBAAY,WAC5BN,EAAQ5B,EAAMgC,QAAQH,GAAS,SAACD,GAAD,OAAWA,EAAQL,OACrD,CAACvB,EAAMgC,OAAQT,IAKlB,OAHAY,YAAkBF,EAAeL,GAC7BF,GAAcU,YAAeH,GAG/B,wBAASxB,EACNN,GAAS,wBAAIE,UAAU,eAAd,SACV,yBAAKA,UAAU,uBACZyB,EAAaO,KAAI,gBAAG7B,EAAH,EAAGA,KAAH,OAChB,kBAAC,EAAD,CACEA,KAAMA,EACN8B,IAAK9B,EAAKI,OAAOC,KACjBR,UAAU,6BAIfmB,GAAgBM,EAAaE,OAAShC,EAAMgC,QAC3C,yBAAK3B,UAAU,aACb,kBAACkC,EAAA,EAAD,CAAYC,QAAS,kBAAMX,GAAS,SAACD,GAAD,OAAWA,EAAQL,OACpDE,IAIW,IAAjBzB,EAAMgC,QAAgB","file":"component---src-templates-tags-js-2ca7555b5e252cac6545.js","sourcesContent":["import React from 'react';\nimport { Layout } from '../components/Layout';\nimport { Posts } from '../components/Posts';\nimport { Experiments } from '../components/Experiments';\nimport { graphql } from 'gatsby';\n\nconst TagsTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const posts = data.allMdx?.edges;\n\n  return (\n    <Layout\n      location={location}\n      title={tag}\n      // description='some description'\n      headerConfig={{ title: tag }}\n    >\n      <Posts posts={posts} title />\n      <hr className=\"mb-4\" />\n      <Experiments tag={tag} title />\n    </Layout>\n  );\n};\n\nexport default TagsTemplate;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { HTMLProps } from 'react';\nimport { Link } from 'gatsby';\nimport { TagList } from './TagList';\nimport { MdxNode } from './Types';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n  node: MdxNode;\n}\n\nexport const PostPreview: React.FC<Props> = ({ node, ...props }) => {\n  const postTitle = node.frontmatter.title || node.fields.slug;\n  const tags = node.frontmatter.tags;\n\n  return (\n    <div {...props}>\n      <div>\n        <Link to={node.fields.slug} className=\"text-xl font-medium\">\n          {postTitle}\n        </Link>\n      </div>\n      <div className=\"flex text-xs text-gray-600\">\n        <p>{node.frontmatter.date}</p>\n        <p className=\"px-1\">-</p>\n        <TagList tags={tags} />\n      </div>\n      <p\n        className=\"mt-1\"\n        dangerouslySetInnerHTML={{\n          __html: node.frontmatter.description || node.excerpt,\n        }}\n      />\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useEffect, useState } from 'react';\nimport { PostPreview } from './PostPreview';\nimport { LinkButton } from './LinkButton';\nimport { MdxNode, NodesOf } from './Types';\nimport { useOnScrollEnd } from '../hooks/useOnScrollEnd';\nimport { useOnNoScrollLoad } from '../hooks/useOnNoScrollLoad';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  posts: NodesOf<MdxNode>;\n}\n\nexport const Posts: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  posts,\n  ...props\n}) => {\n  const [limit, setLimit] = useState(showLimit);\n  const visiblePosts = posts.slice(0, limit || posts.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < posts.length) setLimit((limit) => limit + showLimit);\n  }, [posts.length, showLimit]);\n\n  useOnNoScrollLoad(increaseLimit, limit);\n  if (autoLoadMore) useOnScrollEnd(increaseLimit);\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Posts</h2>}\n      <div className=\"mt-2 flex flex-wrap\">\n        {visiblePosts.map(({ node }) => (\n          <PostPreview\n            node={node}\n            key={node.fields.slug}\n            className=\"w-full lg:w-1/2 mb-4\"\n          />\n        ))}\n      </div>\n      {showLoadMore && visiblePosts.length < posts.length && (\n        <div className=\"mt-0 ml-2\">\n          <LinkButton onClick={() => setLimit((limit) => limit + showLimit)}>\n            {loadMoreText}\n          </LinkButton>\n        </div>\n      )}\n      {posts.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n"],"sourceRoot":""}