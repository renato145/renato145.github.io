{"version":3,"sources":["webpack://renato-hermoza/./src/hooks/useGitRepos.tsx","webpack://renato-hermoza/./src/pages/tags.tsx"],"names":["useGitRepos","tag","name","data","useStaticQuery","allRepos","github","repositoryOwner","repositories","nodes","gitRepos","allGitReposJson","useMemo","forEach","d","tags","indexOf","repoInfo","find","o","repo","Object","assign","url","titleCase","singleSpace","unCamelCase","replace","formatName","push","formatDate","date","formatRelativeDate","Date","location","title","blogData","allMdx","edges","gitData","allTags","blogTags","map","node","frontmatter","flat","gitTags","Set","concat","sort","ascending","tagsContent","results","blog","filter","includes","git","headerConfig","className","key","href","id","Link","to","kebabCase","length","i","fields","slug","updatedAt"],"mappings":"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","file":"component---src-pages-tags-tsx-f818a2cb5eb3d583da1d.js","sourcesContent":["import { graphql, useStaticQuery } from 'gatsby';\nimport { useMemo } from 'react';\nimport { unCamelCase, singleSpace, titleCase } from '../utils';\nimport { GraphqlGithubAll, RepoInfo } from '../components/Types';\n\nconst formatName: (string) => string  = (name) =>\n  titleCase(singleSpace(unCamelCase(name.replace(/[-_]/g, ' '))));\n\ninterface Props {\n  tag?: string;\n  name?: string;\n};\n\nexport const useGitRepos = ({ tag, name }: Props) => {\n  const data = useStaticQuery<GraphqlGithubAll>(\n    graphql`\n      query {\n        allGitReposJson {\n          nodes {\n            name\n            showName\n            tags\n          }\n        }\n        github {\n          repositoryOwner(login: \"renato145\") {\n            repositories(\n              last: 100\n              orderBy: { field: UPDATED_AT, direction: ASC }\n            ) {\n              nodes {\n                name\n                homepageUrl\n                url\n                updatedAt\n                openGraphImageUrl\n                description\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n  const allRepos = data.github.repositoryOwner.repositories.nodes;\n  const gitRepos = data.allGitReposJson.nodes;\n\n  const repos: RepoInfo[] = useMemo(() => {\n    let data: any = [];\n    gitRepos.forEach((d) => {\n      if (name && d.name !== name) return;\n      if (tag && d.tags.indexOf(tag) === -1) return;\n      const repoInfo = { ...allRepos.find((o) => o.name === d.name) };\n      const repo = Object.assign(repoInfo, d);\n      const url = repo['openGraphImageUrl'];\n      if (url.indexOf('https://repository-images') > -1) repo['imgUrl'] = url;\n      repo['name'] = repo['showName']\n        ? repo['showName']\n        : formatName(repo['name']);\n      data.push(repo);\n    });\n\n    return data;\n  }, [allRepos, gitRepos, tag, name]);\n\n  return repos;\n};\n","import React, { useMemo } from 'react';\nimport { graphql, Link, PageProps } from 'gatsby';\nimport { ascending } from 'd3';\nimport kebabCase from 'lodash/kebabCase';\nimport { Layout } from '../components/Layout';\nimport { useGitRepos } from '../hooks/useGitRepos';\nimport { MdxAllNodes } from '../components/Types';\nimport { formatRelativeDate } from '../utils';\nimport './tags.css';\n\nconst formatDate = (date: string) => formatRelativeDate(new Date(date), 'MMMM dd, yyyy');\n\ninterface Props extends PageProps {\n  data: MdxAllNodes;\n}\n\nconst Tags: React.FC<Props> = ({ data, location }) => {\n  const title = 'Tags';\n  const blogData = data.allMdx.edges;\n  const gitData = useGitRepos({});\n\n  const allTags = useMemo(() => {\n    const blogTags = blogData.map((d) => d.node.frontmatter.tags).flat();\n    const gitTags = gitData.map((d) => d.tags).flat();\n    return [...new Set(blogTags.concat(gitTags))].sort(ascending);\n  }, [blogData, gitData]);\n\n  const tagsContent = useMemo(() => {\n    let results = {};\n    allTags.forEach((tag) => {\n      results[tag] = {\n        blog: blogData.filter((d) => d.node.frontmatter.tags.includes(tag)),\n        git: gitData.filter((d) => d.tags.includes(tag)),\n      };\n    });\n    return results;\n  }, [allTags, blogData, gitData]);\n\n  return (\n    <Layout location={location} title={title} headerConfig={{ title }}>\n      <h3 className=\"mt-2 font-medium\">Content</h3>\n      <div className=\"ml-2 mt-1 flex flex-wrap\">\n        {allTags.map((tag) => (\n          <p className=\"w-full lg:w-1/2 xl:w-1/3 text-lg\" key={tag}>\n            <span className=\"mr-1 text-base\">&bull;</span>\n            <a href={`#${tag}`}>{tag}</a>\n          </p>\n        ))}\n      </div>\n\n      <div className=\"mt-4 ml-4\">\n        <ul className=\"tree-root\">\n          {allTags.map((tag) => (\n            <li key={tag}>\n              <h3 id={tag} className=\"tag-title\">\n                <Link to={`/tags/${kebabCase(tag)}`}>{tag}</Link>\n              </h3>\n              <ul className=\"tag-content\">\n                {tagsContent[tag]['blog'].length > 0 && (\n                  <>\n                    <li>\n                      <p className=\"tag-type text-gray-700\">Blog posts</p>\n                      <ul>\n                        {tagsContent[tag]['blog'].map(({ node }, i) => (\n                          <li key={i} className=\"tag-line\">\n                            <Link to={node.fields.slug}>\n                              {node.frontmatter.title || node.fields.slug}\n                            </Link>\n                            <small className=\"text-gray-600\">\n                              {formatDate(node.frontmatter.date)}\n                            </small>\n                          </li>\n                        ))}\n                      </ul>\n                    </li>\n                  </>\n                )}\n                {tagsContent[tag]['git'].length > 0 && (\n                  <>\n                    <li>\n                      <p className=\"tag-type text-gray-700\">Github repos</p>\n                      <ul>\n                        {tagsContent[tag]['git'].map(\n                          ({ url, name, updatedAt }, i) => (\n                            <li key={i} className=\"tag-line\">\n                              <a href={url}>{name}</a>\n                              {updatedAt && (\n                                <small className=\"text-gray-600\">\n                                  {formatDate(updatedAt)}\n                                </small>\n                              )}\n                            </li>\n                          )\n                        )}\n                      </ul>\n                    </li>\n                  </>\n                )}\n              </ul>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}