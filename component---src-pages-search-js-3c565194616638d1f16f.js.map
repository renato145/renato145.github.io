{"version":3,"sources":["webpack:///./src/components/Search.js","webpack:///./src/pages/search.js"],"names":["SearchInput","styled","Form","SearchResults","div","OneResult","ResultLink","Description","Tags","Search","indexQuery","siteSearchIndex","index","useState","results","setResults","useMemo","Index","load","search","useCallback","event","query","target","value","expand","map","ref","documentStore","getDoc","to","style","fontSize","FormControl","type","placeholder","onChange","id","title","name","tags","description","slug","isRepo","undefined","key","href","TagList","SearchPage","location","Layout","headerConfig"],"mappings":"kPAQMA,EAAcC,YAAOC,KAAV,0EAAGD,CAAH,yCAKXE,EAAgBF,IAAOG,IAAV,4EAAGH,CAAH,MAEbI,EAAYJ,IAAOG,IAAV,wEAAGH,CAAH,6GAUTK,EAAaL,IAAOG,IAAV,yEAAGH,CAAH,2BAMVM,EAAcN,IAAOG,IAAV,0EAAGH,CAAH,4FAIbI,GAKEG,EAAOP,IAAOG,IAAV,mEAAGH,CAAH,uBAIGQ,EAAS,WACpB,IAAMC,EAAa,OAQjBC,gBAAgBC,MATQ,EAUIC,mBAAS,IAAhCC,EAVmB,KAUVC,EAVU,KAWpBH,EAAQI,mBAAQ,kBAAMC,QAAMC,KAAKR,KAAa,CAACA,IAE/CS,EAASC,uBACb,SAACC,GACC,IAAMC,EAAQD,EAAME,OAAOC,MAC3BT,EACEH,EACGO,OAAOG,EAAO,CAAEG,QAAQ,IACxBC,KAAI,gBAAGC,EAAH,EAAGA,IAAH,OAAaf,EAAMgB,cAAcC,OAAOF,SAGnD,CAACf,IAGH,OACE,oCACE,kBAACZ,EAAD,KACE,kBAAC,OAAD,CAAM8B,GAAG,eAAeC,MAAO,CAACC,SAAU,UAA1C,oBACA,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASC,SAAUjB,KAE1D,kBAAChB,EAAD,KACGW,EAAQY,KAAI,YAAmD,IAAhDW,EAA+C,EAA/CA,GAAIC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAC5CC,OAAkBC,IAATF,EACf,OACE,kBAACrC,EAAD,CAAWwC,IAAKR,GACd,kBAAC/B,EAAD,KACGqC,EACC,uBAAGG,KAAI,gCAAkCP,GAASD,GAElD,kBAAC,OAAD,CAAMR,GAAIY,GAAOJ,IAGrB,kBAAC9B,EAAD,KACE,kBAACuC,EAAA,EAAD,CAASP,KAAMA,KAEjB,kBAACjC,EAAD,KAAcoC,EAAS,qBAAuBF,UCvE7CO,UAfI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAGpB,OACE,kBAACC,EAAA,EAAD,CACED,SAAUA,EACVX,MAAM,GAENa,aAAc,CAAEb,MAPN,WASV,kBAAC,EAAD,S","file":"component---src-pages-search-js-3c565194616638d1f16f.js","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { Index } from 'elasticlunr';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport TagList from './TagList';\nimport { Form, FormControl } from 'react-bootstrap';\n\nconst SearchInput = styled(Form)`\n  margin-top: 0.5em;\n  margin-bottom: 1em;\n`;\n\nconst SearchResults = styled.div``;\n\nconst OneResult = styled.div`\n  padding: 0.75em 1em;\n  margin: 0.35em 0em;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    background: rgb(233, 244, 255);\n  }\n`;\n\nconst ResultLink = styled.div`\n  & a {\n    font-size: 1.3em;\n  }\n`;\n\nconst Description = styled.div`\n  margin-top: 0.3em;\n  transition: all 0.2s ease-out;\n  color: #5a5a5a;\n  ${OneResult}:hover & {\n    color: #1a1a1a;\n  }\n`;\n\nconst Tags = styled.div`\n  font-size: 0.75em;\n`;\n\nexport const Search = () => {\n  const indexQuery = useStaticQuery(\n    graphql`\n      query SearchIndexQuery {\n        siteSearchIndex {\n          index\n        }\n      }\n    `\n  ).siteSearchIndex.index;\n  const [results, setResults] = useState([]);\n  const index = useMemo(() => Index.load(indexQuery), [indexQuery]);\n\n  const search = useCallback(\n    (event) => {\n      const query = event.target.value;\n      setResults(\n        index\n          .search(query, { expand: true })\n          .map(({ ref }) => index.documentStore.getDoc(ref))\n      );\n    },\n    [index]\n  );\n\n  return (\n    <>\n      <SearchInput>\n        <Link to=\"/searchGraph\" style={{fontSize: '0.8em'}}>Try search graph</Link>\n        <FormControl type=\"text\" placeholder=\"Search\" onChange={search} />\n      </SearchInput>\n      <SearchResults>\n        {results.map(({ id, title, name, tags, description, slug }) => {\n          const isRepo = slug === undefined;\n          return (\n            <OneResult key={id}>\n              <ResultLink>\n                {isRepo ? (\n                  <a href={`https://github.com/renato145/${name}`}>{title}</a>\n                ) : (\n                  <Link to={slug}>{title}</Link>\n                )}\n              </ResultLink>\n              <Tags>\n                <TagList tags={tags} />\n              </Tags>\n              <Description>{isRepo ? 'Github repository.' : description}</Description>\n            </OneResult>\n          );\n        })}\n      </SearchResults>\n    </>\n  );\n};\n","import React from 'react';\nimport Layout from '../components/Layout';\nimport { Search } from '../components/Search';\n\nconst SearchPage = ({ location }) => {\n  const title = 'Search';\n\n  return (\n    <Layout\n      location={location}\n      title=\"\"\n      // description=\"some description\"\n      headerConfig={{ title}}\n    >\n      <Search />\n    </Layout>\n  );\n};\n\nexport default SearchPage;\n"],"sourceRoot":""}