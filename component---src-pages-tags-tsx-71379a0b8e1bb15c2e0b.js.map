{"version":3,"file":"component---src-pages-tags-tsx-71379a0b8e1bb15c2e0b.js","mappings":"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","sources":["webpack://renato-hermoza/./src/hooks/useGitRepos.tsx","webpack://renato-hermoza/./src/pages/tags.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from 'gatsby';\nimport { useMemo } from 'react';\nimport { unCamelCase, singleSpace, titleCase } from '../utils';\nimport { GraphqlGit, GraphqlGithubAll, RepoInfo } from '../Types';\n\nconst formatName: (string) => string = (name) =>\n  titleCase(singleSpace(unCamelCase(name.replace(/[-_]/g, ' '))));\n\ninterface Props {\n  tag?: string;\n  name?: string;\n}\n\nexport const useGitRepos = ({ tag, name }: Props) => {\n  const data = useStaticQuery<GraphqlGithubAll>(\n    graphql`\n      query {\n        allGitReposJson {\n          nodes {\n            name\n            showName\n            tags\n          }\n        }\n        github {\n          repositoryOwner(login: \"renato145\") {\n            repositories(\n              last: 100\n              orderBy: { field: UPDATED_AT, direction: ASC }\n            ) {\n              nodes {\n                name\n                homepageUrl\n                url\n                updatedAt\n                openGraphImageUrl\n                description\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n  const allRepos = data.github.repositoryOwner.repositories.nodes;\n  const gitRepos = data.allGitReposJson.nodes;\n\n  const repos: RepoInfo[] = useMemo(() => {\n    let data: any = [];\n    gitRepos.forEach((d) => {\n      if (name && d.name !== name) return;\n      if (tag && d.tags.indexOf(tag) === -1) return;\n      const repoInfo = {\n        ...allRepos.find((o) => o.name === d.name),\n      } as GraphqlGit;\n      const repo = Object.assign(repoInfo, d);\n      const url = repo['openGraphImageUrl'] ?? '';\n      if (url.indexOf('https://repository-images') > -1) repo['imgUrl'] = url;\n      repo['name'] = repo['showName']\n        ? repo['showName']\n        : formatName(repo['name']);\n      data.push(repo);\n    });\n\n    return data;\n  }, [allRepos, gitRepos, tag, name]);\n\n  return repos;\n};\n","import React, { useMemo } from 'react';\nimport { graphql, Link, PageProps } from 'gatsby';\nimport { ascending } from 'd3';\nimport kebabCase from 'lodash/kebabCase';\nimport { Layout } from '../components/Layout';\nimport { useGitRepos } from '../hooks/useGitRepos';\nimport { MdxAllNodes } from '../Types';\nimport { formatRelativeDate } from '../utils';\nimport './tags.css';\n\nconst formatDate = (date: string) =>\n  formatRelativeDate(new Date(date), 'MMMM dd, yyyy');\n\ninterface Props extends PageProps {\n  data: MdxAllNodes;\n}\n\nconst Tags: React.FC<Props> = ({ data, location }) => {\n  const title = 'Tags';\n  const blogData = data.allMdx.edges;\n  const gitData = useGitRepos({});\n\n  const allTags = useMemo(() => {\n    const blogTags = blogData.map((d) => d.node.frontmatter.tags).flat();\n    const gitTags = gitData.map((d) => d.tags).flat();\n    return [...new Set(blogTags.concat(gitTags))].sort(ascending);\n  }, [blogData, gitData]);\n\n  const tagsContent = useMemo(() => {\n    let results = {};\n    allTags.forEach((tag) => {\n      results[tag] = {\n        blog: blogData.filter((d) => d.node.frontmatter.tags.includes(tag)),\n        git: gitData.filter((d) => d.tags.includes(tag)),\n      };\n    });\n    return results;\n  }, [allTags, blogData, gitData]);\n\n  return (\n    <Layout location={location} title={title} headerConfig={{ title }}>\n      <h3 className=\"mt-2 font-medium\">Content</h3>\n      <div className=\"ml-2 mt-1 flex flex-wrap\">\n        {allTags.map((tag) => (\n          <p className=\"w-full text-lg lg:w-1/2 xl:w-1/3\" key={tag}>\n            <span className=\"mr-1 text-base\">&bull;</span>\n            <a href={`#${tag}`}>{tag}</a>\n          </p>\n        ))}\n      </div>\n\n      <div className=\"mt-4 ml-4\">\n        <ul className=\"tree-root\">\n          {allTags.map((tag) => (\n            <li key={tag}>\n              <h3 id={tag} className=\"tag-title\">\n                <Link to={`/tags/${kebabCase(tag)}`}>{tag}</Link>\n              </h3>\n              <ul className=\"tag-content\">\n                {tagsContent[tag]['blog'].length > 0 && (\n                  <>\n                    <li>\n                      <p className=\"tag-type text-gray-700\">Blog posts</p>\n                      <ul>\n                        {tagsContent[tag]['blog'].map(({ node }, i) => (\n                          <li key={i} className=\"tag-line\">\n                            <Link to={node.fields.slug}>\n                              {node.frontmatter.title || node.fields.slug}\n                            </Link>\n                            <small className=\"text-gray-500\">\n                              {formatDate(node.frontmatter.date)}\n                            </small>\n                          </li>\n                        ))}\n                      </ul>\n                    </li>\n                  </>\n                )}\n                {tagsContent[tag]['git'].length > 0 && (\n                  <>\n                    <li>\n                      <p className=\"tag-type text-gray-700\">Github repos</p>\n                      <ul>\n                        {tagsContent[tag]['git'].map(\n                          ({ url, name, updatedAt }, i) => (\n                            <li key={i} className=\"tag-line\">\n                              <a href={url}>{name}</a>\n                              {updatedAt && (\n                                <small className=\"text-gray-500\">\n                                  {formatDate(updatedAt)}\n                                </small>\n                              )}\n                            </li>\n                          )\n                        )}\n                      </ul>\n                    </li>\n                  </>\n                )}\n              </ul>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["useGitRepos","tag","name","data","useStaticQuery","allRepos","gitRepos","repos","useMemo","d","repoInfo","o","repo","Object","url","titleCase","singleSpace","unCamelCase","formatName","formatDate","date","formatRelativeDate","Date","location","title","blogData","gitData","allTags","blogTags","gitTags","Set","tagsContent","results","blog","git","headerConfig","className","key","href","id","to","kebabCase","node","slug","updatedAt"],"sourceRoot":""}