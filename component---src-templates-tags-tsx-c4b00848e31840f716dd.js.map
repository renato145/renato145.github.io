{"version":3,"file":"component---src-templates-tags-tsx-c4b00848e31840f716dd.js","mappings":"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","sources":["webpack://renato-hermoza/./src/components/GithubPreview.tsx","webpack://renato-hermoza/./src/components/Experiments.tsx","webpack://renato-hermoza/./src/components/LinkButton.tsx","webpack://renato-hermoza/./src/components/PostPreview.tsx","webpack://renato-hermoza/./src/components/Posts.tsx","webpack://renato-hermoza/./src/hooks/useGitRepos.tsx","webpack://renato-hermoza/./src/hooks/useIntersectionObserver.tsx","webpack://renato-hermoza/./src/templates/tags.tsx"],"sourcesContent":["import React, { HTMLProps } from 'react';\nimport { TagList } from './TagList';\nimport { RepoInfo } from '../Types';\nimport { formatRelativeDate } from '../utils';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'data'> {\n  data: RepoInfo;\n}\n\nexport const GithubPreview: React.FC<Props> = ({ data, ...props }) => {\n  const { homepageUrl, url, imgUrl, name, tags, description, updatedAt } = data;\n\n  return (\n    <div {...props}>\n      <div className=\"w-full rounded border p-1 shadow-sm hover:shadow-xl\">\n        {imgUrl && (\n          <a href={homepageUrl || url} target=\"_black\" rel=\"noopener\">\n            <img className=\"\" src={imgUrl} alt={name} />\n          </a>\n        )}\n\n        <div className=\"mt-0 px-3 pb-2\">\n          <div>\n            {updatedAt && (\n              <small className=\"text-gray-500\">\n                Last updated:{' '}\n                {formatRelativeDate(new Date(updatedAt), 'dd/MM/yyyy')}\n              </small>\n            )}\n          </div>\n          <div className=\"text-xl font-semibold\">{name}</div>\n          <TagList linkClassName=\"text-xs\" tags={tags} />\n          <div className=\"mt-1\">{description}</div>\n          <div className=\"mt-4 flex flex-wrap justify-between\">\n            {url && (\n              <a href={url} target=\"_black\" rel=\"noopener\">\n                Go to code\n              </a>\n            )}\n            {homepageUrl && (\n              <a href={homepageUrl} target=\"_black\" rel=\"noopener\">\n                View\n              </a>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useRef, useState } from 'react';\nimport { GithubPreview } from './GithubPreview';\nimport { LinkButton } from './LinkButton';\nimport { useGitRepos } from '../hooks/useGitRepos';\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  tag?: string;\n}\n\nexport const Experiments: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  tag,\n  ...props\n}) => {\n  const gitRepos = useGitRepos({ tag });\n  const [limit, setLimit] = useState(showLimit);\n  const visibleRepos = gitRepos.slice(0, limit || gitRepos.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < gitRepos.length) setLimit((limit) => limit + showLimit);\n  }, [limit, gitRepos.length, showLimit]);\n  const ref = useRef<HTMLDivElement>(null);\n  useIntersectionObserver({\n    target: ref,\n    onIntersect: increaseLimit,\n    enabled: autoLoadMore,\n  });\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Experiments</h2>}\n      <div className=\"mt-2 grid gap-4 md:grid-cols-2 xl:grid-cols-3\">\n        {visibleRepos.map((repo, i) => (\n          <GithubPreview key={i} data={repo} className=\"flex\" />\n        ))}\n      </div>\n      {showLoadMore && visibleRepos.length < gitRepos.length && (\n        <div ref={ref} className=\"mr-4 text-right\">\n          <LinkButton onClick={increaseLimit}>{loadMoreText}</LinkButton>\n        </div>\n      )}\n      {gitRepos.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import React, { HTMLProps } from 'react';\n\ninterface Props\n  extends Omit<HTMLProps<HTMLButtonElement>, 'className' | 'type'> {}\n\nexport const LinkButton: React.FC<Props> = ({ children, ...props }) => (\n  <button\n    className=\"bg-opacity-0 p-0 text-sky-600 hover:bg-opacity-0 hover:text-sky-800 focus:shadow-none active:bg-opacity-0\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n","import React, { HTMLProps } from 'react';\nimport { Link } from 'gatsby';\nimport { TagList } from './TagList';\nimport { MdxNode } from '../Types';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n  node: MdxNode;\n}\n\nexport const PostPreview: React.FC<Props> = ({ node, ...props }) => {\n  const postTitle = node.frontmatter.title || node.fields.slug;\n  const tags = node.frontmatter.tags;\n\n  return (\n    <div {...props}>\n      <div>\n        <Link\n          to={node.fields.slug}\n          className=\"text-xl font-medium leading-normal\"\n        >\n          {postTitle}\n        </Link>\n      </div>\n      <div className=\"flex text-xs leading-normal text-gray-500\">\n        <p>{node.frontmatter.date}</p>\n        <p className=\"px-1\">-</p>\n        <TagList tags={tags} />\n      </div>\n      <p\n        className=\"mt-1\"\n        dangerouslySetInnerHTML={{\n          __html: node.frontmatter.description || node.excerpt,\n        }}\n      />\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useRef, useState } from 'react';\nimport { PostPreview } from './PostPreview';\nimport { LinkButton } from './LinkButton';\nimport { MdxNode, NodesOf } from '../Types';\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  posts: NodesOf<MdxNode>;\n}\n\nexport const Posts: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  posts,\n  ...props\n}) => {\n  const [limit, setLimit] = useState(showLimit);\n  const visiblePosts = posts.slice(0, limit || posts.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < posts.length) setLimit((limit) => limit + showLimit);\n  }, [posts.length, showLimit]);\n  const ref = useRef<HTMLDivElement>(null);\n  useIntersectionObserver({\n    target: ref,\n    onIntersect: increaseLimit,\n    enabled: autoLoadMore,\n  });\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Posts</h2>}\n      <div className=\"mt-2 flex flex-wrap\">\n        {visiblePosts.map(({ node }) => (\n          <PostPreview\n            node={node}\n            key={node.fields.slug}\n            className=\"mb-4 w-full lg:w-1/2\"\n          />\n        ))}\n      </div>\n      {showLoadMore && visiblePosts.length < posts.length && (\n        <div ref={ref} className=\"mt-0 ml-2\">\n          <LinkButton onClick={increaseLimit}>{loadMoreText}</LinkButton>\n        </div>\n      )}\n      {posts.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import { graphql, useStaticQuery } from 'gatsby';\nimport { useMemo } from 'react';\nimport { unCamelCase, singleSpace, titleCase } from '../utils';\nimport { GraphqlGit, GraphqlGithubAll, RepoInfo } from '../Types';\n\nconst formatName: (string) => string = (name) =>\n  titleCase(singleSpace(unCamelCase(name.replace(/[-_]/g, ' '))));\n\ninterface Props {\n  tag?: string;\n  name?: string;\n}\n\nexport const useGitRepos = ({ tag, name }: Props) => {\n  const data = useStaticQuery<GraphqlGithubAll>(\n    graphql`\n      query {\n        allGitReposJson {\n          nodes {\n            name\n            showName\n            tags\n          }\n        }\n        github {\n          repositoryOwner(login: \"renato145\") {\n            repositories(\n              last: 100\n              orderBy: { field: UPDATED_AT, direction: ASC }\n            ) {\n              nodes {\n                name\n                homepageUrl\n                url\n                updatedAt\n                openGraphImageUrl\n                description\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n  const allRepos = data.github.repositoryOwner.repositories.nodes;\n  const gitRepos = data.allGitReposJson.nodes;\n\n  const repos: RepoInfo[] = useMemo(() => {\n    let data: any = [];\n    gitRepos.forEach((d) => {\n      if (name && d.name !== name) return;\n      if (tag && d.tags.indexOf(tag) === -1) return;\n      const repoInfo = {\n        ...allRepos.find((o) => o.name === d.name),\n      } as GraphqlGit;\n      const repo = Object.assign(repoInfo, d);\n      const url = repo['openGraphImageUrl'];\n      if (url.indexOf('https://repository-images') > -1) repo['imgUrl'] = url;\n      repo['name'] = repo['showName']\n        ? repo['showName']\n        : formatName(repo['name']);\n      data.push(repo);\n    });\n\n    return data;\n  }, [allRepos, gitRepos, tag, name]);\n\n  return repos;\n};\n","import React from 'react';\nimport { useEffect } from 'react';\n\ninterface Props extends IntersectionObserverInit {\n  target: React.RefObject<HTMLElement>;\n  onIntersect: () => void;\n  enabled?: boolean;\n}\n\nexport const useIntersectionObserver: (props: Props) => void = ({\n  target,\n  onIntersect,\n  enabled = true,\n  root,\n  rootMargin = '0px',\n  threshold = 1.0,\n}) => {\n  useEffect(() => {\n    if (!enabled) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => entry.isIntersecting && onIntersect());\n      },\n      {\n        root,\n        rootMargin,\n        threshold,\n      }\n    );\n\n    const el = target && target.current;\n    if (!el) return;\n\n    observer.observe(el);\n\n    return () => observer.unobserve(el);\n  }, [target.current, enabled]);\n};\n","import React from 'react';\nimport { Layout } from '../components/Layout';\nimport { Posts } from '../components/Posts';\nimport { Experiments } from '../components/Experiments';\nimport { graphql } from 'gatsby';\n\nconst TagsTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const posts = data.allMdx?.edges;\n\n  return (\n    <Layout\n      location={location}\n      title={tag}\n      // description='some description'\n      headerConfig={{ title: tag }}\n    >\n      <Posts posts={posts} title />\n      <hr className=\"mb-4\" />\n      <Experiments tag={tag} title />\n    </Layout>\n  );\n};\n\nexport default TagsTemplate;\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["GithubPreview","data","props","homepageUrl","url","imgUrl","name","tags","description","updatedAt","className","href","target","rel","src","alt","formatRelativeDate","Date","linkClassName","Experiments","title","showLimit","showLoadMore","loadMoreText","autoLoadMore","tag","gitRepos","useGitRepos","useState","limit","setLimit","visibleRepos","increaseLimit","useCallback","ref","useRef","useIntersectionObserver","onIntersect","enabled","key","onClick","LinkButton","children","PostPreview","node","postTitle","to","dangerouslySetInnerHTML","__html","excerpt","Posts","posts","visiblePosts","useStaticQuery","allRepos","repos","useMemo","d","repoInfo","o","repo","Object","titleCase","singleSpace","unCamelCase","formatName","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","entries","entry","el","pageContext","location","headerConfig"],"sourceRoot":""}