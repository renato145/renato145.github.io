{"version":3,"sources":["webpack:///./src/components/LinkButton.js","webpack:///./src/components/PostPreview.js","webpack:///./src/components/Posts.js","webpack:///./src/pages/blog.js"],"names":["LinkButton","children","props","className","PostPreview","node","postTitle","frontmatter","title","fields","slug","tags","to","date","TagList","prefix","dangerouslySetInnerHTML","__html","description","excerpt","Posts","showLimit","showLoadMore","loadMoreText","posts","useState","limit","setLimit","visiblePosts","slice","length","map","key","onClick","BlogIndex","data","location","allMdx","edges","headerConfig","pageQuery"],"mappings":"yMAEO,IAAMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAaC,E,oIAAhB,wBACxB,0CACEC,UAAU,iIACND,GAEHD,K,qHCHQG,EAAc,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtBC,EAAYD,EAAKE,YAAYC,OAASH,EAAKI,OAAOC,KAClDC,EAAON,EAAKE,YAAYI,KAE9B,OACE,6BAASR,UAAU,WACjB,4BAAQA,UAAU,WAChB,wBAAIA,UAAU,WACZ,kBAAC,OAAD,CAAMS,GAAIP,EAAKI,OAAOC,MAAOJ,IAE/B,2BAAOH,UAAU,oBACdE,EAAKE,YAAYM,KAClB,kBAACC,EAAA,EAAD,CAASH,KAAMA,EAAMI,OAAO,UAGhC,iCACE,uBACEC,wBAAyB,CACvBC,OAAQZ,EAAKE,YAAYW,aAAeb,EAAKc,c,YClB5CC,EAAQ,SAAC,GAMf,IAAD,IALJZ,aAKI,aAJJa,iBAII,MAJQ,EAIR,MAHJC,oBAGI,aAFJC,oBAEI,MAFW,YAEX,EADJC,EACI,EADJA,MACI,EACsBC,mBAASJ,GAA5BK,EADH,KACUC,EADV,KAEEC,EAAeJ,EAAMK,MAAM,EAAGH,GAASF,EAAMM,QAEnD,OACE,oCACGtB,GAAS,wBAAIL,UAAU,WAAd,SACTyB,EAAaG,KAAI,gBAAG1B,EAAH,EAAGA,KAAH,OAChB,kBAAC,EAAD,CAAaA,KAAMA,EAAM2B,IAAK3B,EAAKI,OAAOC,UAE3CY,GAAgBM,EAAaE,OAASN,EAAMM,QAC3C,yBAAK3B,UAAU,WACb,kBAACH,EAAA,EAAD,CAAYiC,QAAS,kBAAMN,GAAS,SAACD,GAAD,OAAWA,EAAQL,OACpDE,IAIW,IAAjBC,EAAMM,QAAgB,uC,kCC3B7B,kGAqBeI,UAhBG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAEnBZ,EAAQW,EAAKE,OAAOC,MAE1B,OACE,kBAAC,IAAD,CACEF,SAAUA,EACV5B,MANU,OAQV+B,aAAc,CAAE/B,MARN,SAUV,kBAAC,IAAD,CAAOgB,MAAOA,MAOb,IAAMgB,EAAS","file":"component---src-pages-blog-js-3a7f8710d979bbf368c3.js","sourcesContent":["import React from 'react';\n\nexport const LinkButton = ({ children, ...props }) => (\n  <button\n    className=\"tw-text-blue-600 hover:tw-text-blue-800 tw-transition tw-duration-150 tw-ease-in-out hover:tw-underline focus:tw-outline-none\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport TagList from './TagList';\n\nexport const PostPreview = ({ node }) => {\n  const postTitle = node.frontmatter.title || node.fields.slug;\n  const tags = node.frontmatter.tags;\n\n  return (\n    <article className=\"tw-mb-4\">\n      <header className=\"tw-mb-1\">\n        <h4 className=\"tw-mb-0\">\n          <Link to={node.fields.slug}>{postTitle}</Link>\n        </h4>\n        <small className=\"tw-text-gray-600\">\n          {node.frontmatter.date}\n          <TagList tags={tags} prefix=\" - \" />\n        </small>\n      </header>\n      <section>\n        <p\n          dangerouslySetInnerHTML={{\n            __html: node.frontmatter.description || node.excerpt,\n          }}\n        />\n      </section>\n    </article>\n  );\n};\n","import React, { useState } from 'react';\nimport { PostPreview } from './PostPreview';\nimport { LinkButton } from './LinkButton';\n\nexport const Posts = ({\n  title = false,\n  showLimit = 5,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  posts,\n}) => {\n  const [limit, setLimit] = useState(showLimit);\n  const visiblePosts = posts.slice(0, limit || posts.length);\n\n  return (\n    <>\n      {title && <h2 className=\"tw-mb-5\">Posts</h2>}\n      {visiblePosts.map(({ node }) => (\n        <PostPreview node={node} key={node.fields.slug} />\n      ))}\n      {showLoadMore && visiblePosts.length < posts.length && (\n        <div className=\"tw-ml-2\">\n          <LinkButton onClick={() => setLimit((limit) => limit + showLimit)}>\n            {loadMoreText}\n          </LinkButton>\n        </div>\n      )}\n      {posts.length === 0 && <div>...</div>}\n    </>\n  );\n};\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { Layout } from '../components/Layout';\nimport { Posts } from '../components/Posts';\n\nconst BlogIndex = ({ data, location }) => {\n  const title = 'Blog';\n  const posts = data.allMdx.edges;\n\n  return (\n    <Layout\n      location={location}\n      title={title}\n      // description={title}\n      headerConfig={{ title }}\n    >\n      <Posts posts={posts} />\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}