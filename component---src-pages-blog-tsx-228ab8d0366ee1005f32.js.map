{"version":3,"sources":["webpack://renato-hermoza/./src/components/LinkButton.tsx","webpack://renato-hermoza/./src/components/PostPreview.tsx","webpack://renato-hermoza/./src/components/Posts.tsx","webpack://renato-hermoza/./src/hooks/useIntersectionObserver.tsx","webpack://renato-hermoza/./src/pages/blog.tsx"],"names":["LinkButton","children","props","className","PostPreview","node","postTitle","frontmatter","title","fields","slug","tags","Link","to","date","TagList","dangerouslySetInnerHTML","__html","description","excerpt","Posts","showLimit","showLoadMore","loadMoreText","autoLoadMore","posts","useState","limit","setLimit","visiblePosts","slice","length","increaseLimit","useCallback","ref","useRef","useIntersectionObserver","target","onIntersect","enabled","map","key","onClick","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","el","current","observe","unobserve","data","location","allMdx","edges","headerConfig"],"mappings":"4LAIaA,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAaC,GAAhB,mBACzC,wCACEC,UAAU,+GACND,GAEHD,K,yHCAQG,EAA+B,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAASH,GAAY,YAC5DI,EAAYD,EAAKE,YAAYC,OAASH,EAAKI,OAAOC,KAClDC,EAAON,EAAKE,YAAYI,KAE9B,OACE,sBAAST,EACP,2BACE,gBAAC,EAAAU,KAAD,CAAMC,GAAIR,EAAKI,OAAOC,KAAMP,UAAU,sCACnCG,IAGL,uBAAKH,UAAU,6CACb,yBAAIE,EAAKE,YAAYO,MACrB,qBAAGX,UAAU,QAAb,KACA,gBAACY,EAAA,EAAD,CAASJ,KAAMA,KAEjB,qBACER,UAAU,OACVa,wBAAyB,CACvBC,OAAQZ,EAAKE,YAAYW,aAAeb,EAAKc,a,iGCb1CC,EAAyB,SAAC,GAQhC,IAAD,IAPJZ,aAOI,aANJa,iBAMI,MANQ,EAMR,MALJC,oBAKI,aAJJC,oBAII,MAJW,YAIX,MAHJC,oBAGI,SAFJC,EAEI,EAFJA,MACGvB,GACC,YACJ,GAA0BwB,cAASL,GAA5BM,EAAP,KAAcC,EAAd,KACMC,EAAeJ,EAAMK,MAAM,EAAGH,GAASF,EAAMM,QAC7CC,GAAgBC,kBAAY,WAC5BN,EAAQF,EAAMM,QAAQH,GAAS,SAACD,GAAD,OAAWA,EAAQN,OACrD,CAACI,EAAMM,OAAQV,IACZa,GAAMC,YAAuB,MAGnC,OAFAC,OAAwB,CAAEC,OAAQH,EAAKI,YAAaN,EAAeO,QAASf,IAG1E,sBAAStB,EACNM,GAAS,sBAAIL,UAAU,eAAd,SACV,uBAAKA,UAAU,uBACZ0B,EAAaW,KAAI,gBAAGnC,EAAH,EAAGA,KAAH,OAChB,gBAACD,EAAD,CACEC,KAAMA,EACNoC,IAAKpC,EAAKI,OAAOC,KACjBP,UAAU,6BAIfmB,GAAgBO,EAAaE,OAASN,EAAMM,QAC3C,uBAAKG,IAAKA,EAAK/B,UAAU,aACvB,gBAACH,EAAA,EAAD,CAAY0C,QAASV,GAClBT,IAIW,IAAjBE,EAAMM,QAAgB,qC,gFC1ChBK,EAAkD,SAAC,GAOzD,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,YAKI,IAJJC,eAII,SAHJI,EAGI,EAHJA,KAGI,IAFJC,kBAEI,MAFS,MAET,MADJC,iBACI,MADQ,EACR,GACJC,gBAAU,WACR,GAAKP,EAAL,CAEA,IAAMQ,EAAW,IAAIC,sBACnB,SAACC,GACCA,EAAQC,SAAQ,SAACC,GAAD,OAAWA,EAAMC,gBAAkBd,SAErD,CACEK,OACAC,aACAC,cAIEQ,EAAKhB,GAAUA,EAAOiB,QAC5B,GAAKD,EAIL,OAFAN,EAASQ,QAAQF,GAEV,kBAAMN,EAASS,UAAUH,OAC/B,CAAChB,EAAOiB,QAASf,M,2ECXtB,UAhBmC,SAAC,GAAwB,IAAtBkB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpClD,EAAQ,OACRiB,EAAQgC,EAAKE,OAAOC,MAE1B,OACE,gBAAC,IAAD,CACEF,SAAUA,EACVlD,MAAOA,EAEPqD,aAAc,CAAErD,UAEhB,gBAAC,IAAD,CAAOiB,MAAOA,EAAOJ,UAAW","file":"component---src-pages-blog-tsx-228ab8d0366ee1005f32.js","sourcesContent":["import React, { HTMLProps } from 'react';\n\ninterface Props extends Omit<HTMLProps<HTMLButtonElement>, \"className\" | \"type\"> {};\n\nexport const LinkButton: React.FC<Props> = ({ children, ...props }) => (\n  <button\n    className=\"p-0 bg-opacity-0 hover:bg-opacity-0 active:bg-opacity-0 focus:shadow-none text-blue-600 hover:text-blue-800\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n","import React, { HTMLProps } from 'react';\nimport { Link } from 'gatsby';\nimport { TagList } from './TagList';\nimport { MdxNode } from './Types';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n  node: MdxNode;\n}\n\nexport const PostPreview: React.FC<Props> = ({ node, ...props }) => {\n  const postTitle = node.frontmatter.title || node.fields.slug;\n  const tags = node.frontmatter.tags;\n\n  return (\n    <div {...props}>\n      <div>\n        <Link to={node.fields.slug} className=\"text-xl font-medium leading-normal\">\n          {postTitle}\n        </Link>\n      </div>\n      <div className=\"flex text-xs text-gray-600 leading-normal\">\n        <p>{node.frontmatter.date}</p>\n        <p className=\"px-1\">-</p>\n        <TagList tags={tags} />\n      </div>\n      <p\n        className=\"mt-1\"\n        dangerouslySetInnerHTML={{\n          __html: node.frontmatter.description || node.excerpt,\n        }}\n      />\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useRef, useState } from 'react';\nimport { PostPreview } from './PostPreview';\nimport { LinkButton } from './LinkButton';\nimport { MdxNode, NodesOf } from './Types';\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  posts: NodesOf<MdxNode>;\n}\n\nexport const Posts: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  posts,\n  ...props\n}) => {\n  const [limit, setLimit] = useState(showLimit);\n  const visiblePosts = posts.slice(0, limit || posts.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < posts.length) setLimit((limit) => limit + showLimit);\n  }, [posts.length, showLimit]);\n  const ref = useRef<HTMLDivElement>(null);\n  useIntersectionObserver({ target: ref, onIntersect: increaseLimit, enabled: autoLoadMore });\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Posts</h2>}\n      <div className=\"mt-2 flex flex-wrap\">\n        {visiblePosts.map(({ node }) => (\n          <PostPreview\n            node={node}\n            key={node.fields.slug}\n            className=\"w-full lg:w-1/2 mb-4\"\n          />\n        ))}\n      </div>\n      {showLoadMore && visiblePosts.length < posts.length && (\n        <div ref={ref} className=\"mt-0 ml-2\">\n          <LinkButton onClick={increaseLimit}>\n            {loadMoreText}\n          </LinkButton>\n        </div>\n      )}\n      {posts.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useEffect } from 'react';\n\ninterface Props extends IntersectionObserverInit {\n  target: React.RefObject<HTMLElement>;\n  onIntersect: () => void;\n  enabled?: boolean;\n}\n\nexport const useIntersectionObserver: (props: Props) => void = ({\n  target,\n  onIntersect,\n  enabled = true,\n  root,\n  rootMargin = '0px',\n  threshold = 1.0,\n}) => {\n  useEffect(() => {\n    if (!enabled) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => entry.isIntersecting && onIntersect());\n      },\n      {\n        root,\n        rootMargin,\n        threshold,\n      }\n    );\n\n    const el = target && target.current;\n    if (!el) return;\n\n    observer.observe(el);\n\n    return () => observer.unobserve(el);\n  }, [target.current, enabled]);\n};\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { Layout } from '../components/Layout';\nimport { Posts } from '../components/Posts';\nimport { MdxAllNodes } from '../components/Types';\n\ninterface Props extends PageProps {\n  data: MdxAllNodes;\n}\n\nconst BlogIndex: React.FC<Props> = ({ data, location }) => {\n  const title = 'Blog';\n  const posts = data.allMdx.edges;\n\n  return (\n    <Layout\n      location={location}\n      title={title}\n      // description={title}\n      headerConfig={{ title }}\n    >\n      <Posts posts={posts} showLimit={9} />\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}