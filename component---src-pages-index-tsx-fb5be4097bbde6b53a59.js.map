{"version":3,"file":"component---src-pages-index-tsx-fb5be4097bbde6b53a59.js","mappings":"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","sources":["webpack://renato-hermoza/./src/components/GithubPreview.tsx","webpack://renato-hermoza/./src/components/Experiments.tsx","webpack://renato-hermoza/./src/components/LinkButton.tsx","webpack://renato-hermoza/./src/components/PostPreview.tsx","webpack://renato-hermoza/./src/components/Posts.tsx","webpack://renato-hermoza/./src/hooks/useGitRepos.tsx","webpack://renato-hermoza/./src/hooks/useIntersectionObserver.tsx","webpack://renato-hermoza/./src/pages/index.tsx"],"sourcesContent":["import React, { HTMLProps } from 'react';\nimport { TagList } from './TagList';\nimport { RepoInfo } from './Types';\nimport { formatRelativeDate } from '../utils';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'data'> {\n  data: RepoInfo;\n}\n\nexport const GithubPreview: React.FC<Props> = ({ data, ...props }) => {\n  const { homepageUrl, url, imgUrl, name, tags, description, updatedAt } = data;\n\n  return (\n    <div {...props}>\n      <div className=\"w-full p-1 rounded border shadow-sm hover:shadow-xl\">\n        {imgUrl && (\n          <a href={homepageUrl || url} target=\"_black\" rel=\"noopener\">\n            <img className=\"\" src={imgUrl} alt={name} />\n          </a>\n        )}\n\n        <div className=\"mt-0 px-3 pb-2\">\n          <div>\n            {updatedAt && (\n              <small className=\"text-gray-500\">\n                Last updated:{' '}\n                {formatRelativeDate(new Date(updatedAt), 'dd/MM/yyyy')}\n              </small>\n            )}\n          </div>\n          <div className=\"text-xl font-semibold\">{name}</div>\n          <TagList linkClassName=\"text-xs\" tags={tags} />\n          <div className=\"mt-1\">{description}</div>\n          <div className=\"mt-4 flex flex-wrap justify-between\">\n            {url && (\n              <a href={url} target=\"_black\" rel=\"noopener\">\n                Go to code\n              </a>\n            )}\n            {homepageUrl && (\n              <a href={homepageUrl} target=\"_black\" rel=\"noopener\">\n                View\n              </a>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useRef, useState } from 'react';\nimport { GithubPreview } from './GithubPreview';\nimport { LinkButton } from './LinkButton';\nimport { useGitRepos } from '../hooks/useGitRepos';\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  tag?: string;\n}\n\nexport const Experiments: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  tag,\n  ...props\n}) => {\n  const gitRepos = useGitRepos({ tag });\n  const [limit, setLimit] = useState(showLimit);\n  const visibleRepos = gitRepos.slice(0, limit || gitRepos.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < gitRepos.length) setLimit((limit) => limit + showLimit);\n  }, [limit, gitRepos.length, showLimit]);\n  const ref = useRef<HTMLDivElement>(null);\n  useIntersectionObserver({\n    target: ref,\n    onIntersect: increaseLimit,\n    enabled: autoLoadMore,\n  });\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Experiments</h2>}\n      <div className=\"mt-2 grid md:grid-cols-2 xl:grid-cols-3 gap-4\">\n        {visibleRepos.map((repo, i) => (\n          <GithubPreview key={i} data={repo} className=\"flex\" />\n        ))}\n      </div>\n      {showLoadMore && visibleRepos.length < gitRepos.length && (\n        <div ref={ref} className=\"mr-4 text-right\">\n          <LinkButton onClick={increaseLimit}>{loadMoreText}</LinkButton>\n        </div>\n      )}\n      {gitRepos.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import React, { HTMLProps } from 'react';\n\ninterface Props extends Omit<HTMLProps<HTMLButtonElement>, \"className\" | \"type\"> {};\n\nexport const LinkButton: React.FC<Props> = ({ children, ...props }) => (\n  <button\n    className=\"p-0 bg-opacity-0 hover:bg-opacity-0 active:bg-opacity-0 focus:shadow-none text-sky-600 hover:text-sky-800\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n","import React, { HTMLProps } from 'react';\nimport { Link } from 'gatsby';\nimport { TagList } from './TagList';\nimport { MdxNode } from './Types';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n  node: MdxNode;\n}\n\nexport const PostPreview: React.FC<Props> = ({ node, ...props }) => {\n  const postTitle = node.frontmatter.title || node.fields.slug;\n  const tags = node.frontmatter.tags;\n\n  return (\n    <div {...props}>\n      <div>\n        <Link to={node.fields.slug} className=\"text-xl font-medium leading-normal\">\n          {postTitle}\n        </Link>\n      </div>\n      <div className=\"flex text-xs text-gray-500 leading-normal\">\n        <p>{node.frontmatter.date}</p>\n        <p className=\"px-1\">-</p>\n        <TagList tags={tags} />\n      </div>\n      <p\n        className=\"mt-1\"\n        dangerouslySetInnerHTML={{\n          __html: node.frontmatter.description || node.excerpt,\n        }}\n      />\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useRef, useState } from 'react';\nimport { PostPreview } from './PostPreview';\nimport { LinkButton } from './LinkButton';\nimport { MdxNode, NodesOf } from './Types';\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  posts: NodesOf<MdxNode>;\n}\n\nexport const Posts: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  posts,\n  ...props\n}) => {\n  const [limit, setLimit] = useState(showLimit);\n  const visiblePosts = posts.slice(0, limit || posts.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < posts.length) setLimit((limit) => limit + showLimit);\n  }, [posts.length, showLimit]);\n  const ref = useRef<HTMLDivElement>(null);\n  useIntersectionObserver({ target: ref, onIntersect: increaseLimit, enabled: autoLoadMore });\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Posts</h2>}\n      <div className=\"mt-2 flex flex-wrap\">\n        {visiblePosts.map(({ node }) => (\n          <PostPreview\n            node={node}\n            key={node.fields.slug}\n            className=\"w-full lg:w-1/2 mb-4\"\n          />\n        ))}\n      </div>\n      {showLoadMore && visiblePosts.length < posts.length && (\n        <div ref={ref} className=\"mt-0 ml-2\">\n          <LinkButton onClick={increaseLimit}>\n            {loadMoreText}\n          </LinkButton>\n        </div>\n      )}\n      {posts.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import { graphql, useStaticQuery } from 'gatsby';\nimport { useMemo } from 'react';\nimport { unCamelCase, singleSpace, titleCase } from '../utils';\nimport { GraphqlGithubAll, RepoInfo } from '../components/Types';\n\nconst formatName: (string) => string  = (name) =>\n  titleCase(singleSpace(unCamelCase(name.replace(/[-_]/g, ' '))));\n\ninterface Props {\n  tag?: string;\n  name?: string;\n};\n\nexport const useGitRepos = ({ tag, name }: Props) => {\n  const data = useStaticQuery<GraphqlGithubAll>(\n    graphql`\n      query {\n        allGitReposJson {\n          nodes {\n            name\n            showName\n            tags\n          }\n        }\n        github {\n          repositoryOwner(login: \"renato145\") {\n            repositories(\n              last: 100\n              orderBy: { field: UPDATED_AT, direction: ASC }\n            ) {\n              nodes {\n                name\n                homepageUrl\n                url\n                updatedAt\n                openGraphImageUrl\n                description\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n  const allRepos = data.github.repositoryOwner.repositories.nodes;\n  const gitRepos = data.allGitReposJson.nodes;\n\n  const repos: RepoInfo[] = useMemo(() => {\n    let data: any = [];\n    gitRepos.forEach((d) => {\n      if (name && d.name !== name) return;\n      if (tag && d.tags.indexOf(tag) === -1) return;\n      const repoInfo = { ...allRepos.find((o) => o.name === d.name) };\n      const repo = Object.assign(repoInfo, d);\n      const url = repo['openGraphImageUrl'];\n      if (url.indexOf('https://repository-images') > -1) repo['imgUrl'] = url;\n      repo['name'] = repo['showName']\n        ? repo['showName']\n        : formatName(repo['name']);\n      data.push(repo);\n    });\n\n    return data;\n  }, [allRepos, gitRepos, tag, name]);\n\n  return repos;\n};\n","import React from 'react';\nimport { useEffect } from 'react';\n\ninterface Props extends IntersectionObserverInit {\n  target: React.RefObject<HTMLElement>;\n  onIntersect: () => void;\n  enabled?: boolean;\n}\n\nexport const useIntersectionObserver: (props: Props) => void = ({\n  target,\n  onIntersect,\n  enabled = true,\n  root,\n  rootMargin = '0px',\n  threshold = 1.0,\n}) => {\n  useEffect(() => {\n    if (!enabled) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => entry.isIntersecting && onIntersect());\n      },\n      {\n        root,\n        rootMargin,\n        threshold,\n      }\n    );\n\n    const el = target && target.current;\n    if (!el) return;\n\n    observer.observe(el);\n\n    return () => observer.unobserve(el);\n  }, [target.current, enabled]);\n};\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { Layout } from '../components/Layout';\nimport { Posts } from '../components/Posts';\nimport { Experiments } from '../components/Experiments';\nimport { GraphqlSite, MdxAllNodes } from '../components/Types';\n\ninterface Props extends PageProps {\n  data: GraphqlSite & MdxAllNodes;\n}\n\nconst Index: React.FC<Props> = ({ data, location }) => {\n  const { title, description } = data.site.siteMetadata;\n  const posts = data.allMdx.edges;\n\n  return (\n    <Layout\n      location={location}\n      title={title}\n      description={description}\n      headerConfig={{ title: 'Home' }}\n    >\n      <Posts posts={posts} autoLoadMore={false} title />\n      <hr className=\"mt-6\" />\n      <Experiments className=\"mt-6\" title />\n    </Layout>\n  );\n};\n\nexport default Index;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["GithubPreview","data","props","homepageUrl","url","imgUrl","name","tags","description","updatedAt","className","href","target","rel","src","alt","formatRelativeDate","Date","TagList","linkClassName","Experiments","title","showLimit","showLoadMore","loadMoreText","autoLoadMore","tag","gitRepos","useGitRepos","useState","limit","setLimit","visibleRepos","slice","length","increaseLimit","useCallback","ref","useRef","useIntersectionObserver","onIntersect","enabled","map","repo","i","key","LinkButton","onClick","children","PostPreview","node","postTitle","frontmatter","fields","slug","Link","to","date","dangerouslySetInnerHTML","__html","excerpt","Posts","posts","visiblePosts","useStaticQuery","allRepos","github","repositoryOwner","repositories","nodes","allGitReposJson","repos","useMemo","forEach","d","indexOf","repoInfo","find","o","Object","assign","titleCase","singleSpace","unCamelCase","replace","formatName","push","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","entries","entry","isIntersecting","el","current","observe","unobserve","location","site","siteMetadata","allMdx","edges","headerConfig"],"sourceRoot":""}