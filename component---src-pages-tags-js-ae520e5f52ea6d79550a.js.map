{"version":3,"sources":["webpack:///./src/pages/tags.js","webpack:///./src/components/useGitRepos.js","webpack:///./src/components/utils.js"],"names":["formatDate","date","moment","calendar","sameElse","Tags","data","location","blogData","allMdx","edges","gitData","useGitRepos","allTags","useMemo","blogTags","map","d","node","frontmatter","tags","flat","gitTags","Set","concat","sort","ascending","tagsContent","results","forEach","tag","blog","filter","includes","git","title","headerConfig","className","key","href","id","to","kebabCase","length","i","fields","slug","url","name","updatedAt","pageQuery","useStaticQuery","allRepos","github","repositoryOwner","repositories","nodes","gitRepos","allGitReposJson","indexOf","repoInfo","find","o","repo","Object","assign","str","toLowerCase","replace","toUpperCase","titleCase","singleSpace","formatName","push"],"mappings":"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","file":"component---src-pages-tags-js-ae520e5f52ea6d79550a.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { graphql, Link } from 'gatsby';\nimport { ascending } from 'd3';\nimport moment from 'moment';\nimport kebabCase from 'lodash/kebabCase';\nimport { Layout } from '../components/Layout';\nimport { useGitRepos } from '../components/useGitRepos';\nimport './tags.css';\n\nconst formatDate = (date) =>\n  moment(date).calendar(null, {\n    sameElse: 'MMMM DD, YYYY',\n  });\n\nconst Tags = ({ data, location }) => {\n  const title = 'Tags';\n  const blogData = data.allMdx.edges;\n  const gitData = useGitRepos({});\n\n  const allTags = useMemo(() => {\n    const blogTags = blogData.map((d) => d.node.frontmatter.tags).flat();\n    const gitTags = gitData.map((d) => d.tags).flat();\n    return [...new Set(blogTags.concat(gitTags))].sort(ascending);\n  }, [blogData, gitData]);\n\n  const tagsContent = useMemo(() => {\n    let results = {};\n    allTags.forEach((tag) => {\n      results[tag] = {\n        blog: blogData.filter((d) => d.node.frontmatter.tags.includes(tag)),\n        git: gitData.filter((d) => d.tags.includes(tag)),\n      };\n    });\n    return results;\n  }, [allTags, blogData, gitData]);\n\n  return (\n    <Layout location={location} title={title} headerConfig={{ title }}>\n      <h3 className=\"mt-2 font-medium\">Content</h3>\n      <div className=\"ml-2 mt-1 flex flex-wrap\">\n        {allTags.map((tag) => (\n          <p className=\"w-full lg:w-1/2 xl:w-1/3 text-lg\" key={tag}>\n            <span className=\"mr-1 text-base\">&bull;</span>\n            <a href={`#${tag}`}>{tag}</a>\n          </p>\n        ))}\n      </div>\n\n      <div className=\"mt-4 ml-4\">\n        <ul className=\"tree-root\">\n          {allTags.map((tag) => (\n            <li key={tag}>\n              <h3 id={tag} className=\"tag-title\">\n                <Link to={`/tags/${kebabCase(tag)}`}>{tag}</Link>\n              </h3>\n              <ul className=\"tag-content\">\n                {tagsContent[tag]['blog'].length > 0 && (\n                  <>\n                    <li>\n                      <p className=\"tag-type\">Blog posts</p>\n                      <ul>\n                        {tagsContent[tag]['blog'].map(({ node }, i) => (\n                          <li key={i} className=\"tag-line\">\n                            <Link to={node.fields.slug}>\n                              {node.frontmatter.title || node.fields.slug}\n                            </Link>\n                            <small className=\"text-muted\">\n                              {formatDate(node.frontmatter.date)}\n                            </small>\n                          </li>\n                        ))}\n                      </ul>\n                    </li>\n                  </>\n                )}\n                {tagsContent[tag]['git'].length > 0 && (\n                  <>\n                    <li>\n                      <p className=\"tag-type\">Github repos</p>\n                      <ul>\n                        {tagsContent[tag]['git'].map(\n                          ({ url, name, updatedAt }, i) => (\n                            <li key={i} className=\"tag-line\">\n                              <a href={url}>{name}</a>\n                              {updatedAt && (\n                                <small className=\"text-muted\">\n                                  {formatDate(updatedAt)}\n                                </small>\n                              )}\n                            </li>\n                          )\n                        )}\n                      </ul>\n                    </li>\n                  </>\n                )}\n              </ul>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql, useStaticQuery } from 'gatsby';\nimport { useMemo } from 'react';\nimport { unCamelCase, singleSpace, titleCase } from './utils';\n\nconst formatName = (name) =>\n  titleCase(singleSpace(unCamelCase(name.replace(/[-_]/g, ' '))));\n\nexport const useGitRepos = ({ tag, name }) => {\n  const data = useStaticQuery(\n    graphql`\n      query {\n        allGitReposJson {\n          nodes {\n            name\n            showName\n            tags\n          }\n        }\n        github {\n          repositoryOwner(login: \"renato145\") {\n            repositories(\n              last: 100\n              orderBy: { field: UPDATED_AT, direction: DESC }\n            ) {\n              nodes {\n                name\n                homepageUrl\n                url\n                updatedAt\n                openGraphImageUrl\n                description\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n  const allRepos = data.github.repositoryOwner.repositories.nodes;\n  const gitRepos = data.allGitReposJson.nodes;\n\n  const repos = useMemo(() => {\n    let data = [];\n    gitRepos.forEach((d) => {\n      if (name && d.name !== name) return;\n      if (tag && d.tags.indexOf(tag) === -1) return;\n      const repoInfo = { ...allRepos.find((o) => o.name === d.name) };\n      const repo = Object.assign(repoInfo, d);\n      const url = repo['openGraphImageUrl'];\n      if (url.indexOf('https://repository-images') > -1) repo['imgUrl'] = url;\n      repo['name'] = repo['showName']\n        ? repo['showName']\n        : formatName(repo['name']);\n      data.push(repo);\n    });\n\n    return data;\n  }, [allRepos, gitRepos, tag, name]);\n\n  return repos;\n};\n","export const unCamelCase = str => str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\").toLowerCase();\nexport const singleSpace = str => str.replace(/\\s+/g, ' ');\nexport const titleCase = str => str.toLowerCase().replace(/^\\w|\\s\\w/g, d => d.toUpperCase());\nexport const strJoin = (str, separator=', ') => str.reduce((o,acc) => `${o}${separator}${acc}`);\nexport const contains = (object, query) => {\n  if (object === null) return false;\n  if (typeof object === 'undefined') return false;\n  return object.indexOf(query) > -1;\n};\n"],"sourceRoot":""}