{"version":3,"sources":["webpack:///./src/hooks/useGitRepos.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/GithubPreview.tsx","webpack:///./src/components/Experiments.tsx","webpack:///./src/components/PostPreview.tsx","webpack:///./src/components/Posts.tsx","webpack:///./src/hooks/useIntersectionObserver.tsx","webpack:///./src/components/LinkButton.tsx"],"names":["useGitRepos","tag","name","data","useStaticQuery","allRepos","github","repositoryOwner","repositories","nodes","gitRepos","allGitReposJson","useMemo","forEach","d","tags","indexOf","repoInfo","find","o","repo","Object","assign","url","titleCase","singleSpace","unCamelCase","replace","formatName","push","Index","location","site","siteMetadata","title","description","posts","allMdx","edges","headerConfig","autoLoadMore","className","GithubPreview","props","homepageUrl","imgUrl","updatedAt","href","target","rel","src","alt","formatRelativeDate","Date","TagList","linkClassName","Experiments","showLimit","showLoadMore","loadMoreText","useState","limit","setLimit","visibleRepos","slice","length","increaseLimit","useCallback","ref","useRef","useIntersectionObserver","onIntersect","enabled","map","i","key","LinkButton","onClick","PostPreview","node","postTitle","frontmatter","fields","slug","to","date","dangerouslySetInnerHTML","__html","excerpt","Posts","visiblePosts","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","entries","entry","isIntersecting","el","current","observe","unobserve","children"],"mappings":"kZAKA,IAQaA,EAAc,SAAC,GAAyB,IAAvBC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,KAC3BC,EAAOC,yBAAc,cA8BrBC,EAAWF,EAAKG,OAAOC,gBAAgBC,aAAaC,MACpDC,EAAWP,EAAKQ,gBAAgBF,MAoBtC,OAlB0BG,mBAAQ,WAChC,IAAIT,EAAY,GAchB,OAbAO,EAASG,SAAQ,SAACC,GAChB,KAAIZ,GAAQY,EAAEZ,OAASA,GACnBD,IAAgC,IAAzBa,EAAEC,KAAKC,QAAQf,IAA1B,CACA,IAAMgB,E,yWAAW,CAAH,GAAQZ,EAASa,MAAK,SAACC,GAAD,OAAOA,EAAEjB,OAASY,EAAEZ,SAClDkB,EAAOC,OAAOC,OAAOL,EAAUH,GAC/BS,EAAMH,EAAI,kBACZG,EAAIP,QAAQ,8BAAgC,IAAGI,EAAI,OAAaG,GACpEH,EAAI,KAAWA,EAAI,SACfA,EAAI,SApD0B,SAAClB,GAAD,OACtCsB,YAAUC,YAAYC,YAAYxB,EAAKyB,QAAQ,QAAS,QAoDhDC,CAAWR,EAAI,MACnBjB,EAAK0B,KAAKT,OAGLjB,IACN,CAACE,EAAUK,EAAUT,EAAKC,M,kCC/D/B,oEA6Be4B,UAlBgB,SAAC,GAAuB,IAArB3B,EAAqB,EAArBA,KAAM4B,EAAe,EAAfA,SAAe,EACtB5B,EAAK6B,KAAKC,aAAjCC,EAD6C,EAC7CA,MAAOC,EADsC,EACtCA,YACTC,EAAQjC,EAAKkC,OAAOC,MAE1B,OACE,kBAAC,IAAD,CACEP,SAAUA,EACVG,MAAOA,EACPC,YAAaA,EACbI,aAAc,CAAEL,MAAO,SAEvB,kBAAC,IAAD,CAAOE,MAAOA,EAAOI,cAAc,EAAON,OAAK,IAC/C,wBAAIO,UAAU,SACd,kBAAC,IAAD,CAAaA,UAAU,OAAOP,OAAK,O,iICf5BQ,EAAiC,SAAC,GAAuB,IAArBvC,EAAqB,EAArBA,KAASwC,EAAY,wBAC5DC,EAAiEzC,EAAjEyC,YAAarB,EAAoDpB,EAApDoB,IAAKsB,EAA+C1C,EAA/C0C,OAAQ3C,EAAuCC,EAAvCD,KAAMa,EAAiCZ,EAAjCY,KAAMoB,EAA2BhC,EAA3BgC,YAAaW,EAAc3C,EAAd2C,UAE3D,OACE,wBAASH,EACP,yBAAKF,UAAU,+EACZI,GACC,uBAAGE,KAAMH,GAAerB,EAAKyB,OAAO,SAASC,IAAI,YAC/C,yBAAKR,UAAU,GAAGS,IAAKL,EAAQM,IAAKjD,KAIxC,yBAAKuC,UAAU,kBACb,6BACGK,GACC,2BAAOL,UAAU,iBAAjB,gBACgB,IACbW,YAAmB,IAAIC,KAAKP,GAAY,gBAI/C,yBAAKL,UAAU,yBAAyBvC,GACxC,kBAACoD,EAAA,EAAD,CAASC,cAAc,UAAUxC,KAAMA,IACvC,yBAAK0B,UAAU,QAAQN,GACvB,yBAAKM,UAAU,uCACZlB,GACC,uBAAGwB,KAAMxB,EAAKyB,OAAO,SAASC,IAAI,YAAlC,cAIDL,GACC,uBAAGG,KAAMH,EAAaI,OAAO,SAASC,IAAI,YAA1C,a,oCCzBDO,EAA+B,SAAC,GAQvC,QAPJtB,aAOI,aANJuB,iBAMI,MANQ,EAMR,MALJC,oBAKI,aAJJC,oBAII,MAJW,YAIX,MAHJnB,oBAGI,SAFJvC,EAEI,EAFJA,IACG0C,EACC,wFACEjC,EAAWV,YAAY,CAAEC,QAD3B,EAEsB2D,mBAASH,GAA5BI,EAFH,KAEUC,EAFV,KAGEC,EAAerD,EAASsD,MAAM,EAAGH,GAASnD,EAASuD,QACnDC,EAAgBC,uBAAY,WAC5BN,EAAQnD,EAASuD,QAAQH,GAAS,SAACD,GAAD,OAAWA,EAAQJ,OACxD,CAACI,EAAOnD,EAASuD,OAAQR,IACtBW,EAAMC,iBAAuB,MAOnC,OANAC,YAAwB,CACtBtB,OAAQoB,EACRG,YAAaL,EACbM,QAAShC,IAIT,wBAASG,EACNT,GAAS,wBAAIO,UAAU,eAAd,eACV,yBAAKA,UAAU,iDACZsB,EAAaU,KAAI,SAACrD,EAAMsD,GAAP,OAChB,kBAAC,EAAD,CAAeC,IAAKD,EAAGvE,KAAMiB,EAAMqB,UAAU,aAGhDiB,GAAgBK,EAAaE,OAASvD,EAASuD,QAC9C,yBAAKG,IAAKA,EAAK3B,UAAU,mBACvB,kBAACmC,EAAA,EAAD,CAAYC,QAASX,GAAgBP,IAGpB,IAApBjD,EAASuD,QAAgB,uC,iICzCnBa,EAA+B,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAASpC,EAAY,wBAC5DqC,EAAYD,EAAKE,YAAY/C,OAAS6C,EAAKG,OAAOC,KAClDpE,EAAOgE,EAAKE,YAAYlE,KAE9B,OACE,wBAAS4B,EACP,6BACE,kBAAC,OAAD,CAAMyC,GAAIL,EAAKG,OAAOC,KAAM1C,UAAU,sCACnCuC,IAGL,yBAAKvC,UAAU,6CACb,2BAAIsC,EAAKE,YAAYI,MACrB,uBAAG5C,UAAU,QAAb,KACA,kBAACa,EAAA,EAAD,CAASvC,KAAMA,KAEjB,uBACE0B,UAAU,OACV6C,wBAAyB,CACvBC,OAAQR,EAAKE,YAAY9C,aAAe4C,EAAKS,a,wBCb1CC,EAAyB,SAAC,GAQjC,QAPJvD,aAOI,aANJuB,iBAMI,MANQ,EAMR,MALJC,oBAKI,aAJJC,oBAII,MAJW,YAIX,MAHJnB,oBAGI,SAFJJ,EAEI,EAFJA,MACGO,EACC,4FACsBiB,mBAASH,GAA5BI,EADH,KACUC,EADV,KAEE4B,EAAetD,EAAM4B,MAAM,EAAGH,GAASzB,EAAM6B,QAC7CC,EAAgBC,uBAAY,WAC5BN,EAAQzB,EAAM6B,QAAQH,GAAS,SAACD,GAAD,OAAWA,EAAQJ,OACrD,CAACrB,EAAM6B,OAAQR,IACZW,EAAMC,iBAAuB,MAGnC,OAFAC,YAAwB,CAAEtB,OAAQoB,EAAKG,YAAaL,EAAeM,QAAShC,IAG1E,wBAASG,EACNT,GAAS,wBAAIO,UAAU,eAAd,SACV,yBAAKA,UAAU,uBACZiD,EAAajB,KAAI,gBAAGM,EAAH,EAAGA,KAAH,OAChB,kBAAC,EAAD,CACEA,KAAMA,EACNJ,IAAKI,EAAKG,OAAOC,KACjB1C,UAAU,6BAIfiB,GAAgBgC,EAAazB,OAAS7B,EAAM6B,QAC3C,yBAAKG,IAAKA,EAAK3B,UAAU,aACvB,kBAACmC,EAAA,EAAD,CAAYC,QAASX,GAClBP,IAIW,IAAjBvB,EAAM6B,QAAgB,uC,kCClD7B,kDAQaK,EAAkD,SAAC,GAO1D,IANJtB,EAMI,EANJA,OACAuB,EAKI,EALJA,YAKI,IAJJC,eAII,SAHJmB,EAGI,EAHJA,KAGI,IAFJC,kBAEI,MAFS,MAET,MADJC,iBACI,MADQ,EACR,EACJC,qBAAU,WACR,GAAKtB,EAAL,CAEA,IAAMuB,EAAW,IAAIC,sBACnB,SAACC,GACCA,EAAQpF,SAAQ,SAACqF,GAAD,OAAWA,EAAMC,gBAAkB5B,SAErD,CACEoB,OACAC,aACAC,cAIEO,EAAKpD,GAAUA,EAAOqD,QAC5B,GAAKD,EAIL,OAFAL,EAASO,QAAQF,GAEV,kBAAML,EAASQ,UAAUH,OAC/B,CAACpD,EAAOqD,QAAS7B,M,yGCjCTI,EAA8B,SAAC,GAAD,IAAG4B,EAAH,EAAGA,SAAa7D,EAAhB,mCACzC,0CACEF,UAAU,+GACNE,GAEH6D","file":"component---src-pages-index-tsx-51595bc1ae15400f6583.js","sourcesContent":["import { graphql, useStaticQuery } from 'gatsby';\nimport { useMemo } from 'react';\nimport { unCamelCase, singleSpace, titleCase } from '../utils';\nimport { GraphqlGithubAll, RepoInfo } from '../components/Types';\n\nconst formatName: (string) => string  = (name) =>\n  titleCase(singleSpace(unCamelCase(name.replace(/[-_]/g, ' '))));\n\ninterface Props {\n  tag?: string;\n  name?: string;\n};\n\nexport const useGitRepos = ({ tag, name }: Props) => {\n  const data = useStaticQuery<GraphqlGithubAll>(\n    graphql`\n      query {\n        allGitReposJson {\n          nodes {\n            name\n            showName\n            tags\n          }\n        }\n        github {\n          repositoryOwner(login: \"renato145\") {\n            repositories(\n              last: 100\n              orderBy: { field: UPDATED_AT, direction: DESC }\n            ) {\n              nodes {\n                name\n                homepageUrl\n                url\n                updatedAt\n                openGraphImageUrl\n                description\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n  const allRepos = data.github.repositoryOwner.repositories.nodes;\n  const gitRepos = data.allGitReposJson.nodes;\n\n  const repos: RepoInfo[] = useMemo(() => {\n    let data: any = [];\n    gitRepos.forEach((d) => {\n      if (name && d.name !== name) return;\n      if (tag && d.tags.indexOf(tag) === -1) return;\n      const repoInfo = { ...allRepos.find((o) => o.name === d.name) };\n      const repo = Object.assign(repoInfo, d);\n      const url = repo['openGraphImageUrl'];\n      if (url.indexOf('https://repository-images') > -1) repo['imgUrl'] = url;\n      repo['name'] = repo['showName']\n        ? repo['showName']\n        : formatName(repo['name']);\n      data.push(repo);\n    });\n\n    return data;\n  }, [allRepos, gitRepos, tag, name]);\n\n  return repos;\n};\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { Layout } from '../components/Layout';\nimport { Posts } from '../components/Posts';\nimport { Experiments } from '../components/Experiments';\nimport { GraphqlSite, MdxAllNodes } from '../components/Types';\n\ninterface Props extends PageProps {\n  data: GraphqlSite & MdxAllNodes;\n}\n\nconst Index: React.FC<Props> = ({ data, location }) => {\n  const { title, description } = data.site.siteMetadata;\n  const posts = data.allMdx.edges;\n\n  return (\n    <Layout\n      location={location}\n      title={title}\n      description={description}\n      headerConfig={{ title: 'Home' }}\n    >\n      <Posts posts={posts} autoLoadMore={false} title />\n      <hr className=\"mt-6\" />\n      <Experiments className=\"mt-6\" title />\n    </Layout>\n  );\n};\n\nexport default Index;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { HTMLProps } from 'react';\nimport { TagList } from './TagList';\nimport { RepoInfo } from './Types';\nimport { formatRelativeDate } from '../utils';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'data'> {\n  data: RepoInfo;\n}\n\nexport const GithubPreview: React.FC<Props> = ({ data, ...props }) => {\n  const { homepageUrl, url, imgUrl, name, tags, description, updatedAt } = data;\n\n  return (\n    <div {...props}>\n      <div className=\"w-full p-1 transition duration-150 rounded border shadow-sm hover:shadow-md\">\n        {imgUrl && (\n          <a href={homepageUrl || url} target=\"_black\" rel=\"noopener\">\n            <img className=\"\" src={imgUrl} alt={name} />\n          </a>\n        )}\n\n        <div className=\"mt-0 px-3 pb-2\">\n          <div>\n            {updatedAt && (\n              <small className=\"text-gray-600\">\n                Last updated:{' '}\n                {formatRelativeDate(new Date(updatedAt), 'dd/MM/yyyy')}\n              </small>\n            )}\n          </div>\n          <div className=\"text-xl font-semibold\">{name}</div>\n          <TagList linkClassName=\"text-xs\" tags={tags} />\n          <div className=\"mt-1\">{description}</div>\n          <div className=\"mt-4 flex flex-wrap justify-between\">\n            {url && (\n              <a href={url} target=\"_black\" rel=\"noopener\">\n                Go to code\n              </a>\n            )}\n            {homepageUrl && (\n              <a href={homepageUrl} target=\"_black\" rel=\"noopener\">\n                View\n              </a>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useRef, useState } from 'react';\nimport { GithubPreview } from './GithubPreview';\nimport { LinkButton } from './LinkButton';\nimport { useGitRepos } from '../hooks/useGitRepos';\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  tag?: string;\n}\n\nexport const Experiments: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  tag,\n  ...props\n}) => {\n  const gitRepos = useGitRepos({ tag });\n  const [limit, setLimit] = useState(showLimit);\n  const visibleRepos = gitRepos.slice(0, limit || gitRepos.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < gitRepos.length) setLimit((limit) => limit + showLimit);\n  }, [limit, gitRepos.length, showLimit]);\n  const ref = useRef<HTMLDivElement>(null);\n  useIntersectionObserver({\n    target: ref,\n    onIntersect: increaseLimit,\n    enabled: autoLoadMore,\n  });\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Experiments</h2>}\n      <div className=\"mt-2 grid md:grid-cols-2 xl:grid-cols-3 gap-4\">\n        {visibleRepos.map((repo, i) => (\n          <GithubPreview key={i} data={repo} className=\"flex\" />\n        ))}\n      </div>\n      {showLoadMore && visibleRepos.length < gitRepos.length && (\n        <div ref={ref} className=\"mr-4 text-right\">\n          <LinkButton onClick={increaseLimit}>{loadMoreText}</LinkButton>\n        </div>\n      )}\n      {gitRepos.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import React, { HTMLProps } from 'react';\nimport { Link } from 'gatsby';\nimport { TagList } from './TagList';\nimport { MdxNode } from './Types';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n  node: MdxNode;\n}\n\nexport const PostPreview: React.FC<Props> = ({ node, ...props }) => {\n  const postTitle = node.frontmatter.title || node.fields.slug;\n  const tags = node.frontmatter.tags;\n\n  return (\n    <div {...props}>\n      <div>\n        <Link to={node.fields.slug} className=\"text-xl font-medium leading-normal\">\n          {postTitle}\n        </Link>\n      </div>\n      <div className=\"flex text-xs text-gray-600 leading-normal\">\n        <p>{node.frontmatter.date}</p>\n        <p className=\"px-1\">-</p>\n        <TagList tags={tags} />\n      </div>\n      <p\n        className=\"mt-1\"\n        dangerouslySetInnerHTML={{\n          __html: node.frontmatter.description || node.excerpt,\n        }}\n      />\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useRef, useState } from 'react';\nimport { PostPreview } from './PostPreview';\nimport { LinkButton } from './LinkButton';\nimport { MdxNode, NodesOf } from './Types';\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  posts: NodesOf<MdxNode>;\n}\n\nexport const Posts: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  posts,\n  ...props\n}) => {\n  const [limit, setLimit] = useState(showLimit);\n  const visiblePosts = posts.slice(0, limit || posts.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < posts.length) setLimit((limit) => limit + showLimit);\n  }, [posts.length, showLimit]);\n  const ref = useRef<HTMLDivElement>(null);\n  useIntersectionObserver({ target: ref, onIntersect: increaseLimit, enabled: autoLoadMore });\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Posts</h2>}\n      <div className=\"mt-2 flex flex-wrap\">\n        {visiblePosts.map(({ node }) => (\n          <PostPreview\n            node={node}\n            key={node.fields.slug}\n            className=\"w-full lg:w-1/2 mb-4\"\n          />\n        ))}\n      </div>\n      {showLoadMore && visiblePosts.length < posts.length && (\n        <div ref={ref} className=\"mt-0 ml-2\">\n          <LinkButton onClick={increaseLimit}>\n            {loadMoreText}\n          </LinkButton>\n        </div>\n      )}\n      {posts.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useEffect } from 'react';\n\ninterface Props extends IntersectionObserverInit {\n  target: React.RefObject<HTMLElement>;\n  onIntersect: () => void;\n  enabled?: boolean;\n}\n\nexport const useIntersectionObserver: (props: Props) => void = ({\n  target,\n  onIntersect,\n  enabled = true,\n  root,\n  rootMargin = '0px',\n  threshold = 1.0,\n}) => {\n  useEffect(() => {\n    if (!enabled) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => entry.isIntersecting && onIntersect());\n      },\n      {\n        root,\n        rootMargin,\n        threshold,\n      }\n    );\n\n    const el = target && target.current;\n    if (!el) return;\n\n    observer.observe(el);\n\n    return () => observer.unobserve(el);\n  }, [target.current, enabled]);\n};\n","import React, { HTMLProps } from 'react';\n\ninterface Props extends Omit<HTMLProps<HTMLButtonElement>, \"className\" | \"type\"> {};\n\nexport const LinkButton: React.FC<Props> = ({ children, ...props }) => (\n  <button\n    className=\"p-0 bg-opacity-0 hover:bg-opacity-0 active:bg-opacity-0 focus:shadow-none text-blue-600 hover:text-blue-800\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n"],"sourceRoot":""}