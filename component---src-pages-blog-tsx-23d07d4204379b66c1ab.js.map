{"version":3,"sources":["webpack:///./src/pages/blog.tsx","webpack:///./src/components/PostPreview.tsx","webpack:///./src/components/Posts.tsx","webpack:///./src/hooks/useIntersectionObserver.tsx","webpack:///./src/components/LinkButton.tsx"],"names":["BlogIndex","data","location","posts","allMdx","edges","title","headerConfig","showLimit","PostPreview","node","props","postTitle","frontmatter","fields","slug","tags","to","className","date","TagList","dangerouslySetInnerHTML","__html","description","excerpt","Posts","showLoadMore","loadMoreText","autoLoadMore","useState","limit","setLimit","visiblePosts","slice","length","increaseLimit","useCallback","ref","useRef","useIntersectionObserver","target","onIntersect","enabled","map","key","LinkButton","onClick","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","el","current","observe","unobserve","children"],"mappings":"8FAAA,wDA0BeA,UAhBoB,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAEpCC,EAAQF,EAAKG,OAAOC,MAE1B,OACE,kBAAC,IAAD,CACEH,SAAUA,EACVI,MANU,OAQVC,aAAc,CAAED,MARN,SAUV,kBAAC,IAAD,CAAOH,MAAOA,EAAOK,UAAW,O,iICZzBC,EAA+B,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAASC,EAAY,wBAC5DC,EAAYF,EAAKG,YAAYP,OAASI,EAAKI,OAAOC,KAClDC,EAAON,EAAKG,YAAYG,KAE9B,OACE,wBAASL,EACP,6BACE,kBAAC,OAAD,CAAMM,GAAIP,EAAKI,OAAOC,KAAMG,UAAU,sCACnCN,IAGL,yBAAKM,UAAU,6CACb,2BAAIR,EAAKG,YAAYM,MACrB,uBAAGD,UAAU,QAAb,KACA,kBAACE,EAAA,EAAD,CAASJ,KAAMA,KAEjB,uBACEE,UAAU,OACVG,wBAAyB,CACvBC,OAAQZ,EAAKG,YAAYU,aAAeb,EAAKc,a,wBCb1CC,EAAyB,SAAC,GAQjC,QAPJnB,aAOI,aANJE,iBAMI,MANQ,EAMR,MALJkB,oBAKI,aAJJC,oBAII,MAJW,YAIX,MAHJC,oBAGI,SAFJzB,EAEI,EAFJA,MACGQ,EACC,4FACsBkB,mBAASrB,GAA5BsB,EADH,KACUC,EADV,KAEEC,EAAe7B,EAAM8B,MAAM,EAAGH,GAAS3B,EAAM+B,QAC7CC,EAAgBC,uBAAY,WAC5BN,EAAQ3B,EAAM+B,QAAQH,GAAS,SAACD,GAAD,OAAWA,EAAQtB,OACrD,CAACL,EAAM+B,OAAQ1B,IACZ6B,EAAMC,iBAAuB,MAGnC,OAFAC,YAAwB,CAAEC,OAAQH,EAAKI,YAAaN,EAAeO,QAASd,IAG1E,wBAASjB,EACNL,GAAS,wBAAIY,UAAU,eAAd,SACV,yBAAKA,UAAU,uBACZc,EAAaW,KAAI,gBAAGjC,EAAH,EAAGA,KAAH,OAChB,kBAAC,EAAD,CACEA,KAAMA,EACNkC,IAAKlC,EAAKI,OAAOC,KACjBG,UAAU,6BAIfQ,GAAgBM,EAAaE,OAAS/B,EAAM+B,QAC3C,yBAAKG,IAAKA,EAAKnB,UAAU,aACvB,kBAAC2B,EAAA,EAAD,CAAYC,QAASX,GAClBR,IAIW,IAAjBxB,EAAM+B,QAAgB,uC,kCClD7B,kDAQaK,EAAkD,SAAC,GAO1D,IANJC,EAMI,EANJA,OACAC,EAKI,EALJA,YAKI,IAJJC,eAII,SAHJK,EAGI,EAHJA,KAGI,IAFJC,kBAEI,MAFS,MAET,MADJC,iBACI,MADQ,EACR,EACJC,qBAAU,WACR,GAAKR,EAAL,CAEA,IAAMS,EAAW,IAAIC,sBACnB,SAACC,GACCA,EAAQC,SAAQ,SAACC,GAAD,OAAWA,EAAMC,gBAAkBf,SAErD,CACEM,OACAC,aACAC,cAIEQ,EAAKjB,GAAUA,EAAOkB,QAC5B,GAAKD,EAIL,OAFAN,EAASQ,QAAQF,GAEV,kBAAMN,EAASS,UAAUH,OAC/B,CAACjB,EAAOkB,QAAShB,M,yGCjCTG,EAA8B,SAAC,GAAD,IAAGgB,EAAH,EAAGA,SAAalD,EAAhB,mCACzC,0CACEO,UAAU,+GACNP,GAEHkD","file":"component---src-pages-blog-tsx-23d07d4204379b66c1ab.js","sourcesContent":["import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { Layout } from '../components/Layout';\nimport { Posts } from '../components/Posts';\nimport { MdxAllNodes } from '../components/Types';\n\ninterface Props extends PageProps {\n  data: MdxAllNodes;\n}\n\nconst BlogIndex: React.FC<Props> = ({ data, location }) => {\n  const title = 'Blog';\n  const posts = data.allMdx.edges;\n\n  return (\n    <Layout\n      location={location}\n      title={title}\n      // description={title}\n      headerConfig={{ title }}\n    >\n      <Posts posts={posts} showLimit={9} />\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { HTMLProps } from 'react';\nimport { Link } from 'gatsby';\nimport { TagList } from './TagList';\nimport { MdxNode } from './Types';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n  node: MdxNode;\n}\n\nexport const PostPreview: React.FC<Props> = ({ node, ...props }) => {\n  const postTitle = node.frontmatter.title || node.fields.slug;\n  const tags = node.frontmatter.tags;\n\n  return (\n    <div {...props}>\n      <div>\n        <Link to={node.fields.slug} className=\"text-xl font-medium leading-normal\">\n          {postTitle}\n        </Link>\n      </div>\n      <div className=\"flex text-xs text-gray-600 leading-normal\">\n        <p>{node.frontmatter.date}</p>\n        <p className=\"px-1\">-</p>\n        <TagList tags={tags} />\n      </div>\n      <p\n        className=\"mt-1\"\n        dangerouslySetInnerHTML={{\n          __html: node.frontmatter.description || node.excerpt,\n        }}\n      />\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useRef, useState } from 'react';\nimport { PostPreview } from './PostPreview';\nimport { LinkButton } from './LinkButton';\nimport { MdxNode, NodesOf } from './Types';\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  posts: NodesOf<MdxNode>;\n}\n\nexport const Posts: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  posts,\n  ...props\n}) => {\n  const [limit, setLimit] = useState(showLimit);\n  const visiblePosts = posts.slice(0, limit || posts.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < posts.length) setLimit((limit) => limit + showLimit);\n  }, [posts.length, showLimit]);\n  const ref = useRef<HTMLDivElement>(null);\n  useIntersectionObserver({ target: ref, onIntersect: increaseLimit, enabled: autoLoadMore });\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Posts</h2>}\n      <div className=\"mt-2 flex flex-wrap\">\n        {visiblePosts.map(({ node }) => (\n          <PostPreview\n            node={node}\n            key={node.fields.slug}\n            className=\"w-full lg:w-1/2 mb-4\"\n          />\n        ))}\n      </div>\n      {showLoadMore && visiblePosts.length < posts.length && (\n        <div ref={ref} className=\"mt-0 ml-2\">\n          <LinkButton onClick={increaseLimit}>\n            {loadMoreText}\n          </LinkButton>\n        </div>\n      )}\n      {posts.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useEffect } from 'react';\n\ninterface Props extends IntersectionObserverInit {\n  target: React.RefObject<HTMLElement>;\n  onIntersect: () => void;\n  enabled?: boolean;\n}\n\nexport const useIntersectionObserver: (props: Props) => void = ({\n  target,\n  onIntersect,\n  enabled = true,\n  root,\n  rootMargin = '0px',\n  threshold = 1.0,\n}) => {\n  useEffect(() => {\n    if (!enabled) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => entry.isIntersecting && onIntersect());\n      },\n      {\n        root,\n        rootMargin,\n        threshold,\n      }\n    );\n\n    const el = target && target.current;\n    if (!el) return;\n\n    observer.observe(el);\n\n    return () => observer.unobserve(el);\n  }, [target.current, enabled]);\n};\n","import React, { HTMLProps } from 'react';\n\ninterface Props extends Omit<HTMLProps<HTMLButtonElement>, \"className\" | \"type\"> {};\n\nexport const LinkButton: React.FC<Props> = ({ children, ...props }) => (\n  <button\n    className=\"p-0 bg-opacity-0 hover:bg-opacity-0 active:bg-opacity-0 focus:shadow-none text-blue-600 hover:text-blue-800\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n"],"sourceRoot":""}