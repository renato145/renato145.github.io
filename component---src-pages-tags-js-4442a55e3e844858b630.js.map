{"version":3,"sources":["webpack:///./src/pages/tags.js"],"names":["formatDate","date","moment","calendar","sameElse","Tags","data","location","blogData","allMdx","edges","gitData","useGitRepos","allTags","useMemo","blogTags","map","d","node","frontmatter","tags","flat","gitTags","Set","concat","sort","ascending","tagsContent","results","forEach","tag","blog","filter","includes","git","title","headerConfig","className","key","href","id","to","kebabCase","length","i","fields","slug","url","name","updatedAt","pageQuery"],"mappings":"snCASA,IAAMA,EAAa,SAACC,GAAD,OACjBC,IAAOD,GAAME,SAAS,KAAM,CAC1BC,SAAU,mBA8FCC,UA3FF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAEdC,EAAWF,EAAKG,OAAOC,MACvBC,EAAUC,YAAY,IAEtBC,EAAUC,mBAAQ,WACtB,IAAMC,EAAWP,EAASQ,KAAI,SAACC,GAAD,OAAOA,EAAEC,KAAKC,YAAYC,QAAMC,OACxDC,EAAUX,EAAQK,KAAI,SAACC,GAAD,OAAOA,EAAEG,QAAMC,OAC3C,OAAO,EAAI,IAAIE,IAAIR,EAASS,OAAOF,KAAWG,KAAKC,OAClD,CAAClB,EAAUG,IAERgB,EAAcb,mBAAQ,WAC1B,IAAIc,EAAU,GAOd,OANAf,EAAQgB,SAAQ,SAACC,GACfF,EAAQE,GAAO,CACbC,KAAMvB,EAASwB,QAAO,SAACf,GAAD,OAAOA,EAAEC,KAAKC,YAAYC,KAAKa,SAASH,MAC9DI,IAAKvB,EAAQqB,QAAO,SAACf,GAAD,OAAOA,EAAEG,KAAKa,SAASH,UAGxCF,IACN,CAACf,EAASL,EAAUG,IAEvB,OACE,kBAAC,IAAD,CAAQJ,SAAUA,EAAU4B,MAtBhB,OAsB8BC,aAAc,CAAED,MAtB9C,SAuBV,wBAAIE,UAAU,oBAAd,WACA,yBAAKA,UAAU,4BACZxB,EAAQG,KAAI,SAACc,GAAD,OACX,uBAAGO,UAAU,mCAAmCC,IAAKR,GACnD,0BAAMO,UAAU,kBAAhB,KACA,uBAAGE,KAAI,IAAMT,GAAQA,QAK3B,yBAAKO,UAAU,aACb,wBAAIA,UAAU,aACXxB,EAAQG,KAAI,SAACc,GAAD,OACX,wBAAIQ,IAAKR,GACP,wBAAIU,GAAIV,EAAKO,UAAU,aACrB,kBAAC,OAAD,CAAMI,GAAE,SAAWC,IAAUZ,IAASA,IAExC,wBAAIO,UAAU,eACXV,EAAYG,GAAZ,KAAyBa,OAAS,GACjC,oCACE,4BACE,uBAAGN,UAAU,YAAb,cACA,4BACGV,EAAYG,GAAZ,KAAyBd,KAAI,WAAW4B,GAAX,IAAG1B,EAAH,EAAGA,KAAH,OAC5B,wBAAIoB,IAAKM,EAAGP,UAAU,YACpB,kBAAC,OAAD,CAAMI,GAAIvB,EAAK2B,OAAOC,MACnB5B,EAAKC,YAAYgB,OAASjB,EAAK2B,OAAOC,MAEzC,2BAAOT,UAAU,cACdrC,EAAWkB,EAAKC,YAAYlB,cAQ1C0B,EAAYG,GAAZ,IAAwBa,OAAS,GAChC,oCACE,4BACE,uBAAGN,UAAU,YAAb,gBACA,4BACGV,EAAYG,GAAZ,IAAwBd,KACvB,WAA2B4B,GAA3B,IAAGG,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAAd,OACE,wBAAIX,IAAKM,EAAGP,UAAU,YACpB,uBAAGE,KAAMQ,GAAMC,GACdC,GACC,2BAAOZ,UAAU,cACdrC,EAAWiD,oBAqBvC,IAAMC,EAAS,c","file":"component---src-pages-tags-js-4442a55e3e844858b630.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { graphql, Link } from 'gatsby';\nimport { ascending } from 'd3';\nimport moment from 'moment';\nimport kebabCase from 'lodash/kebabCase';\nimport { Layout } from '../components/Layout';\nimport { useGitRepos } from '../components/useGitRepos';\nimport './tags.css';\n\nconst formatDate = (date) =>\n  moment(date).calendar(null, {\n    sameElse: 'MMMM DD, YYYY',\n  });\n\nconst Tags = ({ data, location }) => {\n  const title = 'Tags';\n  const blogData = data.allMdx.edges;\n  const gitData = useGitRepos({});\n\n  const allTags = useMemo(() => {\n    const blogTags = blogData.map((d) => d.node.frontmatter.tags).flat();\n    const gitTags = gitData.map((d) => d.tags).flat();\n    return [...new Set(blogTags.concat(gitTags))].sort(ascending);\n  }, [blogData, gitData]);\n\n  const tagsContent = useMemo(() => {\n    let results = {};\n    allTags.forEach((tag) => {\n      results[tag] = {\n        blog: blogData.filter((d) => d.node.frontmatter.tags.includes(tag)),\n        git: gitData.filter((d) => d.tags.includes(tag)),\n      };\n    });\n    return results;\n  }, [allTags, blogData, gitData]);\n\n  return (\n    <Layout location={location} title={title} headerConfig={{ title }}>\n      <h3 className=\"mt-2 font-medium\">Content</h3>\n      <div className=\"ml-2 mt-1 flex flex-wrap\">\n        {allTags.map((tag) => (\n          <p className=\"w-full lg:w-1/2 xl:w-1/3 text-lg\" key={tag}>\n            <span className=\"mr-1 text-base\">&bull;</span>\n            <a href={`#${tag}`}>{tag}</a>\n          </p>\n        ))}\n      </div>\n\n      <div className=\"mt-4 ml-4\">\n        <ul className=\"tree-root\">\n          {allTags.map((tag) => (\n            <li key={tag}>\n              <h3 id={tag} className=\"tag-title\">\n                <Link to={`/tags/${kebabCase(tag)}`}>{tag}</Link>\n              </h3>\n              <ul className=\"tag-content\">\n                {tagsContent[tag]['blog'].length > 0 && (\n                  <>\n                    <li>\n                      <p className=\"tag-type\">Blog posts</p>\n                      <ul>\n                        {tagsContent[tag]['blog'].map(({ node }, i) => (\n                          <li key={i} className=\"tag-line\">\n                            <Link to={node.fields.slug}>\n                              {node.frontmatter.title || node.fields.slug}\n                            </Link>\n                            <small className=\"text-muted\">\n                              {formatDate(node.frontmatter.date)}\n                            </small>\n                          </li>\n                        ))}\n                      </ul>\n                    </li>\n                  </>\n                )}\n                {tagsContent[tag]['git'].length > 0 && (\n                  <>\n                    <li>\n                      <p className=\"tag-type\">Github repos</p>\n                      <ul>\n                        {tagsContent[tag]['git'].map(\n                          ({ url, name, updatedAt }, i) => (\n                            <li key={i} className=\"tag-line\">\n                              <a href={url}>{name}</a>\n                              {updatedAt && (\n                                <small className=\"text-muted\">\n                                  {formatDate(updatedAt)}\n                                </small>\n                              )}\n                            </li>\n                          )\n                        )}\n                      </ul>\n                    </li>\n                  </>\n                )}\n              </ul>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}