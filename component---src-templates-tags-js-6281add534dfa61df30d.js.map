{"version":3,"sources":["webpack:///./src/hooks/useGitRepos.tsx","webpack:///./src/components/utils.tsx","webpack:///./src/hooks/useOnScrollEnd.tsx","webpack:///./src/templates/tags.js","webpack:///./src/hooks/useOnNoScrollLoad.tsx","webpack:///./src/components/GithubPreview.tsx","webpack:///./src/components/Experiments.tsx","webpack:///./src/components/PostPreview.tsx","webpack:///./src/components/Posts.tsx","webpack:///./src/components/LinkButton.tsx"],"names":["useGitRepos","tag","name","data","useStaticQuery","allRepos","github","repositoryOwner","repositories","nodes","gitRepos","allGitReposJson","useMemo","forEach","d","tags","indexOf","repoInfo","find","o","repo","Object","assign","url","str","toLowerCase","replace","toUpperCase","titleCase","singleSpace","formatName","push","useOnScrollEnd","cb","useEffect","throttleCb","throttle","f","scrollNode","document","scrollingElement","documentElement","scrollContainerBottomPosition","Math","round","scrollTop","window","innerHeight","scrollHeight","addEventListener","removeEventListener","TagsTemplate","pageContext","location","posts","allMdx","edges","title","headerConfig","className","pageQuery","useOnNoScrollLoad","observe","useCallback","GithubPreview","props","homepageUrl","imgUrl","description","updatedAt","href","target","rel","src","alt","moment","calendar","sameElse","TagList","linkClassName","Experiments","showLimit","showLoadMore","loadMoreText","autoLoadMore","useState","limit","setLimit","visibleRepos","slice","length","increaseLimit","map","i","key","LinkButton","onClick","PostPreview","node","postTitle","frontmatter","fields","slug","to","date","dangerouslySetInnerHTML","__html","excerpt","Posts","visiblePosts","children"],"mappings":"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","file":"component---src-templates-tags-js-6281add534dfa61df30d.js","sourcesContent":["import { graphql, useStaticQuery } from 'gatsby';\nimport { useMemo } from 'react';\nimport { unCamelCase, singleSpace, titleCase } from '../components/utils';\nimport { GraphqlGithubAll, GraphqlRepo, RepoInfo } from '../components/Types';\n\nconst formatName: (string) => string  = (name) =>\n  titleCase(singleSpace(unCamelCase(name.replace(/[-_]/g, ' '))));\n\ninterface Props {\n  tag?: string;\n  name?: string;\n};\n\nexport const useGitRepos = ({ tag, name }: Props) => {\n  const data = useStaticQuery<GraphqlGithubAll>(\n    graphql`\n      query {\n        allGitReposJson {\n          nodes {\n            name\n            showName\n            tags\n          }\n        }\n        github {\n          repositoryOwner(login: \"renato145\") {\n            repositories(\n              last: 100\n              orderBy: { field: UPDATED_AT, direction: DESC }\n            ) {\n              nodes {\n                name\n                homepageUrl\n                url\n                updatedAt\n                openGraphImageUrl\n                description\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n  const allRepos = data.github.repositoryOwner.repositories.nodes;\n  const gitRepos = data.allGitReposJson.nodes;\n\n  const repos: RepoInfo[] = useMemo(() => {\n    let data: any = [];\n    gitRepos.forEach((d) => {\n      if (name && d.name !== name) return;\n      if (tag && d.tags.indexOf(tag) === -1) return;\n      const repoInfo = { ...allRepos.find((o) => o.name === d.name) };\n      const repo = Object.assign(repoInfo, d);\n      const url = repo['openGraphImageUrl'];\n      if (url.indexOf('https://repository-images') > -1) repo['imgUrl'] = url;\n      repo['name'] = repo['showName']\n        ? repo['showName']\n        : formatName(repo['name']);\n      data.push(repo);\n    });\n\n    return data;\n  }, [allRepos, gitRepos, tag, name]);\n\n  return repos;\n};\n","export const unCamelCase = (str: string) =>\n  str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, '$1 $2').toLowerCase();\n\nexport const singleSpace = (str: string) => str.replace(/\\s+/g, ' ');\n\nexport const titleCase = (str: string) =>\n  str.toLowerCase().replace(/^\\w|\\s\\w/g, (d) => d.toUpperCase());\n\nexport const strJoin = (str: string[], separator = ', ') =>\n  str.reduce((o, acc) => `${o}${separator}${acc}`);\n\nexport const contains = (object, query) => {\n  if (object === null) return false;\n  if (typeof object === 'undefined') return false;\n  return object.indexOf(query) > -1;\n};\n","import { useEffect } from 'react';\nimport { throttle } from 'lodash';\n\nexport const useOnScrollEnd = (cb: () => void) => {\n  useEffect(() => {\n    const throttleCb = throttle(cb, 200);\n    const f = () => {\n      const scrollNode = document.scrollingElement || document.documentElement;\n      const scrollContainerBottomPosition = Math.round(\n        scrollNode.scrollTop + window.innerHeight\n      );\n      const scrollPosition = Math.round(scrollNode.scrollHeight);\n\n      if (scrollPosition === scrollContainerBottomPosition) {\n        throttleCb();\n      }\n    };\n    window.addEventListener('scroll', f);\n\n    return () => {\n      window.removeEventListener('scroll', f);\n    };\n  }, [cb]);\n};\n","import React from 'react';\nimport { Layout } from '../components/Layout';\nimport { Posts } from '../components/Posts';\nimport { Experiments } from '../components/Experiments';\nimport { graphql } from 'gatsby';\n\nconst TagsTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const posts = data.allMdx?.edges;\n\n  return (\n    <Layout\n      location={location}\n      title={tag}\n      // description='some description'\n      headerConfig={{ title: tag }}\n    >\n      <Posts posts={posts} title />\n      <hr className=\"mb-4\" />\n      <Experiments tag={tag} title />\n    </Layout>\n  );\n};\n\nexport default TagsTemplate;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useCallback, useEffect } from 'react';\nimport { throttle } from 'lodash';\n\nexport const useOnNoScrollLoad = (cb: () => void, observe: any) => {\n  const throttleCb = useCallback(\n    throttle(() => {\n      cb();\n    }, 200),\n    [cb]\n  );\n\n  useEffect(() => {\n    if (document.documentElement.scrollHeight === window.innerHeight){\n      throttleCb();\n    }\n  }, [throttleCb, observe]);\n};\n","import React, { HTMLProps } from 'react';\nimport moment from 'moment';\nimport { TagList } from './TagList';\nimport { RepoInfo } from './Types';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, \"data\"> {\n  data: RepoInfo;\n}\n\nexport const GithubPreview: React.FC<Props> = ({ data, ...props }) => {\n  const { homepageUrl, url, imgUrl, name, tags, description, updatedAt } = data;\n\n  return (\n    <div {...props}>\n      <div className=\"w-full p-1 transition duration-150 rounded border shadow-sm hover:shadow-md\">\n        {imgUrl && (\n          <a href={homepageUrl || url} target=\"_black\" rel=\"noopener\">\n            <img className=\"\" src={imgUrl} alt={name} />\n          </a>\n        )}\n\n        <div className=\"mt-0 px-3 pb-2\">\n          <div>\n            {updatedAt && (\n              <small className=\"text-gray-600\">\n                Last updated:{' '}\n                {moment(updatedAt).calendar(null, {\n                  sameElse: 'DD/MM/YYYY',\n                })}\n              </small>\n            )}\n          </div>\n          <div className=\"text-xl font-semibold\">{name}</div>\n          <TagList linkClassName=\"text-xs\" tags={tags} />\n          <div className=\"mt-1\">{description}</div>\n          <div className=\"mt-4 flex flex-wrap justify-between\">\n            {url && (\n              <a href={url} target=\"_black\" rel=\"noopener\">\n                Go to code\n              </a>\n            )}\n            {homepageUrl && (\n              <a href={homepageUrl} target=\"_black\" rel=\"noopener\">\n                View\n              </a>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useState } from 'react';\nimport { GithubPreview } from './GithubPreview';\nimport { LinkButton } from './LinkButton';\nimport { useGitRepos } from '../hooks/useGitRepos';\nimport { useOnScrollEnd } from '../hooks/useOnScrollEnd';\nimport { useOnNoScrollLoad } from '../hooks/useOnNoScrollLoad';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, \"title\"> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  tag?: string;\n}\n\nexport const Experiments: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  tag,\n  ...props\n}) => {\n  const gitRepos = useGitRepos({ tag });\n  const [limit, setLimit] = useState(showLimit);\n  const visibleRepos = gitRepos.slice(0, limit || gitRepos.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < gitRepos.length) setLimit((limit) => limit + showLimit);\n  }, [limit, gitRepos.length, showLimit]);\n\n  useOnNoScrollLoad(increaseLimit, limit);\n  if (autoLoadMore) useOnScrollEnd(increaseLimit);\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Experiments</h2>}\n      <div className=\"mt-2 flex flex-wrap items-stretch\">\n        {visibleRepos.map((repo, i) => (\n          <GithubPreview\n            key={i}\n            data={repo}\n            className=\"flex flex-auto p-2 md:max-w-1/2 xl:max-w-1/3\"\n          />\n        ))}\n      </div>\n      {showLoadMore && visibleRepos.length < gitRepos.length && (\n        <div className=\"mr-4 text-right\">\n          <LinkButton onClick={increaseLimit}>\n            {loadMoreText}\n          </LinkButton>\n        </div>\n      )}\n      {gitRepos.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import React, { HTMLProps } from 'react';\nimport { Link } from 'gatsby';\nimport { TagList } from './TagList';\nimport { MdxNode } from './Types';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n  node: MdxNode;\n}\n\nexport const PostPreview: React.FC<Props> = ({ node, ...props }) => {\n  const postTitle = node.frontmatter.title || node.fields.slug;\n  const tags = node.frontmatter.tags;\n\n  return (\n    <div {...props}>\n      <div>\n        <Link to={node.fields.slug} className=\"text-xl font-medium\">\n          {postTitle}\n        </Link>\n      </div>\n      <div className=\"flex text-xs text-gray-600\">\n        <p>{node.frontmatter.date}</p>\n        <p className=\"px-1\">-</p>\n        <TagList tags={tags} />\n      </div>\n      <p\n        className=\"mt-1\"\n        dangerouslySetInnerHTML={{\n          __html: node.frontmatter.description || node.excerpt,\n        }}\n      />\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useEffect, useState } from 'react';\nimport { PostPreview } from './PostPreview';\nimport { LinkButton } from './LinkButton';\nimport { MdxNode, NodesOf } from './Types';\nimport { useOnScrollEnd } from '../hooks/useOnScrollEnd';\nimport { useOnNoScrollLoad } from '../hooks/useOnNoScrollLoad';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  posts: NodesOf<MdxNode>;\n}\n\nexport const Posts: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  posts,\n  ...props\n}) => {\n  const [limit, setLimit] = useState(showLimit);\n  const visiblePosts = posts.slice(0, limit || posts.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < posts.length) setLimit((limit) => limit + showLimit);\n  }, [posts.length, showLimit]);\n\n  useOnNoScrollLoad(increaseLimit, limit);\n  if (autoLoadMore) useOnScrollEnd(increaseLimit);\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Posts</h2>}\n      <div className=\"mt-2 flex flex-wrap\">\n        {visiblePosts.map(({ node }) => (\n          <PostPreview\n            node={node}\n            key={node.fields.slug}\n            className=\"w-full lg:w-1/2 mb-4\"\n          />\n        ))}\n      </div>\n      {showLoadMore && visiblePosts.length < posts.length && (\n        <div className=\"mt-0 ml-2\">\n          <LinkButton onClick={() => setLimit((limit) => limit + showLimit)}>\n            {loadMoreText}\n          </LinkButton>\n        </div>\n      )}\n      {posts.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import React, { HTMLProps } from 'react';\n\ninterface Props extends Omit<HTMLProps<HTMLButtonElement>, \"className\" | \"type\"> {};\n\nexport const LinkButton: React.FC<Props> = ({ children, ...props }) => (\n  <button\n    className=\"p-0 bg-opacity-0 hover:bg-opacity-0 active:bg-opacity-0 focus:shadow-none text-blue-600 hover:text-blue-800\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n"],"sourceRoot":""}