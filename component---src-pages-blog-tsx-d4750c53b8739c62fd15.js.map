{"version":3,"file":"component---src-pages-blog-tsx-d4750c53b8739c62fd15.js","mappings":"4LAKaA,EAA8B,SAAC,GAAD,IAAGC,EAAH,WAAgBC,GAAhB,mBACzC,wCACEC,UAAU,6GADZ,GADyC,K,2GCI9BC,EAA+B,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAASH,GAAY,YAC5DI,EAAYD,EAAAA,YAAAA,OAA0BA,EAAAA,OAA5C,KACME,EAAOF,EAAAA,YAAb,KAEA,OACE,wBACE,2BACE,wBACEG,GAAIH,EAAAA,OADN,KAEEF,UAAU,sCAJhB,IASE,uBAAKA,UAAU,6CACb,yBAAIE,EAAAA,YADN,MAEE,qBAAGF,UAAU,QAFf,KAGE,qBAASI,KAAMA,KAEjB,qBACEJ,UADF,OAEEM,wBAAyB,CACvBC,OAAQL,EAAAA,YAAAA,aAAgCA,EAAKM,a,iGChB1CC,EAAyB,SAAC,GAQhC,IAAD,IAPJC,MAAAA,OAOI,aANJC,UAAAA,OAMI,MANQ,EAMR,MALJC,aAAAA,OAKI,aAJJC,aAAAA,OAII,MAJW,YAIX,MAHJC,aAAAA,OAGI,SAFJC,EAEI,EAFJA,MACGhB,GACC,YACJ,GAA0BiB,EAAAA,EAAAA,UAA1B,GAAOC,EAAP,KAAcC,EAAd,KACMC,EAAeJ,EAAAA,MAAAA,EAAeE,GAASF,EAA7C,QACMK,GAAgBC,EAAAA,EAAAA,cAAY,WAC5BJ,EAAQF,EAAZ,QAA0BG,GAAS,mBAAWD,EAAX,OAClC,CAACF,EAAD,OAFH,IAGMO,GAAMC,EAAAA,EAAAA,QAAZ,MAOA,OANAC,EAAAA,EAAAA,GAAwB,CACtBC,OADsB,EAEtBC,YAFsB,EAGtBC,QAASb,IAIT,wBACGJ,GAAS,sBAAIV,UAAU,eAD1B,SAEE,uBAAKA,UAAU,uBACZmB,EAAA,KAAiB,gBAAGjB,EAAH,cAChB,mBACEA,KADF,EAEE0B,IAAK1B,EAAAA,OAFP,KAGEF,UAAU,6BAIfY,GAAgBO,EAAAA,OAAsBJ,EAAtCH,QACC,uBAAKU,IAAL,EAAetB,UAAU,aACvB,qBAAY6B,QAAST,GAb3B,IAgBGL,IAAAA,EAAAA,QAAsB,2BAjB3B,U,mEC3BWS,EAAkD,SAAC,GAOzD,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,YAKI,IAJJC,QAAAA,OAII,SAHJG,EAGI,EAHJA,KAGI,IAFJC,WAAAA,OAEI,MAFS,MAET,MADJC,UAAAA,OACI,MADQ,EACR,GACJC,EAAAA,EAAAA,YAAU,WACR,MAEA,IAAMC,EAAW,IAAIC,sBACnB,YACEC,EAAAA,SAAgB,mBAAWC,EAAAA,gBAAwBX,SAErD,CACEI,KADF,EAEEC,WAFF,EAGEC,UAAAA,IAIEM,EAAKb,GAAUA,EAArB,QACA,KAIA,OAFAS,EAAAA,QAAAA,GAEO,kBAAMA,EAAAA,UAAN,OACN,CAACT,EAAD,QApBHQ,M,6DCSF,UAhBmC,SAAC,GAAwB,IAAtBM,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpC9B,EAAN,OACMK,EAAQwB,EAAAA,OAAd,MAEA,OACE,qBACEC,SADF,EAEE9B,MAFF,EAIE+B,aAAc,CAAE/B,MAAAA,IAEhB,qBAAOK,MAAP,EAAqBJ,UAAW","sources":["webpack://renato-hermoza/./src/components/LinkButton.tsx","webpack://renato-hermoza/./src/components/PostPreview.tsx","webpack://renato-hermoza/./src/components/Posts.tsx","webpack://renato-hermoza/./src/hooks/useIntersectionObserver.tsx","webpack://renato-hermoza/./src/pages/blog.tsx"],"sourcesContent":["import React, { HTMLProps } from 'react';\n\ninterface Props\n  extends Omit<HTMLProps<HTMLButtonElement>, 'className' | 'type'> {}\n\nexport const LinkButton: React.FC<Props> = ({ children, ...props }) => (\n  <button\n    className=\"bg-opacity-0 p-0 text-sky-600 hover:bg-opacity-0 hover:text-sky-800 focus:shadow-none active:bg-opacity-0\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n","import React, { HTMLProps } from 'react';\nimport { Link } from 'gatsby';\nimport { TagList } from './TagList';\nimport { MdxNode } from '../Types';\n\ninterface Props extends HTMLProps<HTMLDivElement> {\n  node: MdxNode;\n}\n\nexport const PostPreview: React.FC<Props> = ({ node, ...props }) => {\n  const postTitle = node.frontmatter.title || node.fields.slug;\n  const tags = node.frontmatter.tags;\n\n  return (\n    <div {...props}>\n      <div>\n        <Link\n          to={node.fields.slug}\n          className=\"text-xl font-medium leading-normal\"\n        >\n          {postTitle}\n        </Link>\n      </div>\n      <div className=\"flex text-xs leading-normal text-gray-500\">\n        <p>{node.frontmatter.date}</p>\n        <p className=\"px-1\">-</p>\n        <TagList tags={tags} />\n      </div>\n      <p\n        className=\"mt-1\"\n        dangerouslySetInnerHTML={{\n          __html: node.frontmatter.description || node.excerpt,\n        }}\n      />\n    </div>\n  );\n};\n","import React, { HTMLProps, useCallback, useRef, useState } from 'react';\nimport { PostPreview } from './PostPreview';\nimport { LinkButton } from './LinkButton';\nimport { MdxNode, NodesOf } from '../Types';\nimport { useIntersectionObserver } from '../hooks/useIntersectionObserver';\n\ninterface Props extends Omit<HTMLProps<HTMLDivElement>, 'title'> {\n  title?: boolean;\n  showLimit?: number;\n  showLoadMore?: boolean;\n  loadMoreText?: string;\n  autoLoadMore?: boolean;\n  posts: NodesOf<MdxNode>;\n}\n\nexport const Posts: React.FC<Props> = ({\n  title = false,\n  showLimit = 6,\n  showLoadMore = true,\n  loadMoreText = 'Load more',\n  autoLoadMore = true,\n  posts,\n  ...props\n}) => {\n  const [limit, setLimit] = useState(showLimit);\n  const visiblePosts = posts.slice(0, limit || posts.length);\n  const increaseLimit = useCallback(() => {\n    if (limit < posts.length) setLimit((limit) => limit + showLimit);\n  }, [posts.length, showLimit]);\n  const ref = useRef<HTMLDivElement>(null);\n  useIntersectionObserver({\n    target: ref,\n    onIntersect: increaseLimit,\n    enabled: autoLoadMore,\n  });\n\n  return (\n    <div {...props}>\n      {title && <h2 className=\"font-medium\">Posts</h2>}\n      <div className=\"mt-2 flex flex-wrap\">\n        {visiblePosts.map(({ node }) => (\n          <PostPreview\n            node={node}\n            key={node.fields.slug}\n            className=\"mb-4 w-full lg:w-1/2\"\n          />\n        ))}\n      </div>\n      {showLoadMore && visiblePosts.length < posts.length && (\n        <div ref={ref} className=\"mt-0 ml-2\">\n          <LinkButton onClick={increaseLimit}>{loadMoreText}</LinkButton>\n        </div>\n      )}\n      {posts.length === 0 && <div>...</div>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useEffect } from 'react';\n\ninterface Props extends IntersectionObserverInit {\n  target: React.RefObject<HTMLElement>;\n  onIntersect: () => void;\n  enabled?: boolean;\n}\n\nexport const useIntersectionObserver: (props: Props) => void = ({\n  target,\n  onIntersect,\n  enabled = true,\n  root,\n  rootMargin = '0px',\n  threshold = 1.0,\n}) => {\n  useEffect(() => {\n    if (!enabled) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => entry.isIntersecting && onIntersect());\n      },\n      {\n        root,\n        rootMargin,\n        threshold,\n      }\n    );\n\n    const el = target && target.current;\n    if (!el) return;\n\n    observer.observe(el);\n\n    return () => observer.unobserve(el);\n  }, [target.current, enabled]);\n};\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport { Layout } from '../components/Layout';\nimport { Posts } from '../components/Posts';\nimport { MdxAllNodes } from '../Types';\n\ninterface Props extends PageProps {\n  data: MdxAllNodes;\n}\n\nconst BlogIndex: React.FC<Props> = ({ data, location }) => {\n  const title = 'Blog';\n  const posts = data.allMdx.edges;\n\n  return (\n    <Layout\n      location={location}\n      title={title}\n      // description={title}\n      headerConfig={{ title }}\n    >\n      <Posts posts={posts} showLimit={9} />\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["LinkButton","children","props","className","PostPreview","node","postTitle","tags","to","dangerouslySetInnerHTML","__html","excerpt","Posts","title","showLimit","showLoadMore","loadMoreText","autoLoadMore","posts","useState","limit","setLimit","visiblePosts","increaseLimit","useCallback","ref","useRef","useIntersectionObserver","target","onIntersect","enabled","key","onClick","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","entries","entry","el","data","location","headerConfig"],"sourceRoot":""}